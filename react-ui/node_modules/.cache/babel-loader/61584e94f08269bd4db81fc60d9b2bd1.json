{"ast":null,"code":"// import sfmcClient from './sfmcClient'\n// import {store} from './store'\n// const clientId = process.env.REACT_APP_SFMC_CLIENTID;\n// const clientSecret = process.env.REACT_APP_SFMC_CLIENTSECRET;\n// const stack = process.env.REACT_APP_SFMC_STACK;\n// const origin = process.env.REACT_APP_SFMC_ORIGIN;\n// const authOrigin = process.env.REACT_APP_SFMC_AUTHORIGIN;\n// const soapOrigin = process.env.REACT_APP_SFMC_SOAPORIGIN;\n// const redirectUri = process.env.REACT_APP_REDIRECTURI\n// const encodedRedirectUri = encodeURIComponent(redirectUri)\n// let functions = {\n//   getAllDataExtensions: () => {\n//     var options = {\n//         props: [\n//         'ObjectID',\n//         'PartnerKey',\n//         'CustomerKey',\n//         'Name',\n//         'CreatedDate',\n//         'ModifiedDate',\n//         'Client.ID',\n//         'Description',\n//         'IsSendable',\n//         'IsTestable',\n//         'SendableDataExtensionField.Name',\n//         'SendableSubscriberField.Name',\n//         'Template.CustomerKey',\n//         'CategoryID',\n//         'Status',\n//         'IsPlatformObject',\n//         'DataRetentionPeriodLength',\n//         'DataRetentionPeriodUnitOfMeasure',\n//         'RowBasedRetention',\n//         'ResetRetentionPeriodOnImport',\n//         'DeleteAtEndOfRetentionPeriod',\n//         'RetainUntil',\n//         'DataRetentionPeriod'\n//         ],\n//         filter: {\n//           leftOperand: 'Client.ID',\n//           operator: 'isNotNull',\n//           rightOperand: ''\n//         }\n//     };\n//     const de = sfmcClient.dataExtension(options);\n//     let dataExtensionsResult = new Promise((resolve, reject) => {\n//         de.get((err, res) => {\n//         if (err) console.log(err);\n//         if (res) resolve(res.body.Results);\n//         });\n//     });\n//     return dataExtensionsResult;\n//   },\n//   getAuthCode: () => {\n//     fetch(`${authOrigin}/v2/authorize?response_type=code&client_id=${clientId}&redirect_uri=${encodedRedirectUri}`)\n//       .then(response => window.location.assign(response.url))\n//   },\n//   getAccessToken: (authCode) => {\n//     let body = {\n//       grant_type: 'authorization_code',\n//       code: authCode,\n//       client_id: clientId,\n//       client_secret: clientSecret,\n//       redirect_uri: redirectUri\n//     }\n//     fetch(`${authOrigin}/v2/token`, {\n//       method: 'POST',\n//       headers: {\n//         'content-type': 'application/json'\n//       },\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         store.dispatch({\n//           type: 'ACCESS_TOKEN_RECEIVED',\n//           payload: {\n//             accessToken: data.access_token,\n//             refreshToken: data.refresh_token,\n//             tokenExpirationSeconds: data.expires_in\n//           }\n//         })\n//       })\n//   }\n// }\n// export default functions","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/react-ui/src/sfmcHelper.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA","sourcesContent":["// import sfmcClient from './sfmcClient'\r\n// import {store} from './store'\r\n// const clientId = process.env.REACT_APP_SFMC_CLIENTID;\r\n// const clientSecret = process.env.REACT_APP_SFMC_CLIENTSECRET;\r\n// const stack = process.env.REACT_APP_SFMC_STACK;\r\n// const origin = process.env.REACT_APP_SFMC_ORIGIN;\r\n// const authOrigin = process.env.REACT_APP_SFMC_AUTHORIGIN;\r\n// const soapOrigin = process.env.REACT_APP_SFMC_SOAPORIGIN;\r\n// const redirectUri = process.env.REACT_APP_REDIRECTURI\r\n// const encodedRedirectUri = encodeURIComponent(redirectUri)\r\n\r\n// let functions = {\r\n\r\n//   getAllDataExtensions: () => {\r\n//     var options = {\r\n//         props: [\r\n//         'ObjectID',\r\n//         'PartnerKey',\r\n//         'CustomerKey',\r\n//         'Name',\r\n//         'CreatedDate',\r\n//         'ModifiedDate',\r\n//         'Client.ID',\r\n//         'Description',\r\n//         'IsSendable',\r\n//         'IsTestable',\r\n//         'SendableDataExtensionField.Name',\r\n//         'SendableSubscriberField.Name',\r\n//         'Template.CustomerKey',\r\n//         'CategoryID',\r\n//         'Status',\r\n//         'IsPlatformObject',\r\n//         'DataRetentionPeriodLength',\r\n//         'DataRetentionPeriodUnitOfMeasure',\r\n//         'RowBasedRetention',\r\n//         'ResetRetentionPeriodOnImport',\r\n//         'DeleteAtEndOfRetentionPeriod',\r\n//         'RetainUntil',\r\n//         'DataRetentionPeriod'\r\n//         ],\r\n//         filter: {\r\n//           leftOperand: 'Client.ID',\r\n//           operator: 'isNotNull',\r\n//           rightOperand: ''\r\n//         }\r\n//     };\r\n  \r\n//     const de = sfmcClient.dataExtension(options);\r\n  \r\n//     let dataExtensionsResult = new Promise((resolve, reject) => {\r\n//         de.get((err, res) => {\r\n//         if (err) console.log(err);\r\n//         if (res) resolve(res.body.Results);\r\n//         });\r\n//     });\r\n  \r\n//     return dataExtensionsResult;\r\n//   },\r\n\r\n//   getAuthCode: () => {\r\n//     fetch(`${authOrigin}/v2/authorize?response_type=code&client_id=${clientId}&redirect_uri=${encodedRedirectUri}`)\r\n//       .then(response => window.location.assign(response.url))\r\n//   },\r\n\r\n//   getAccessToken: (authCode) => {\r\n//     let body = {\r\n//       grant_type: 'authorization_code',\r\n//       code: authCode,\r\n//       client_id: clientId,\r\n//       client_secret: clientSecret,\r\n//       redirect_uri: redirectUri\r\n//     }\r\n    \r\n//     fetch(`${authOrigin}/v2/token`, {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'content-type': 'application/json'\r\n//       },\r\n//       body: JSON.stringify(body)\r\n//     })\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         store.dispatch({\r\n//           type: 'ACCESS_TOKEN_RECEIVED',\r\n//           payload: {\r\n//             accessToken: data.access_token,\r\n//             refreshToken: data.refresh_token,\r\n//             tokenExpirationSeconds: data.expires_in\r\n//           }\r\n//         })\r\n//       })\r\n      \r\n//   }\r\n\r\n\r\n// }\r\n\r\n// export default functions\r\n"]},"metadata":{},"sourceType":"module"}