{"ast":null,"code":"/*\r\n * Copyright (c) 2018, salesforce.com, inc.\r\n * All rights reserved.\r\n * Licensed under the BSD 3-Clause license.\r\n * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause\r\n */\n'use strict';\n\nconst FuelAuth = require('fuel-auth');\n\nconst helpers = require('./helpers');\n\nconst request = require('request');\n\nconst version = require('../package.json').version;\n\nconst clone = require('lodash.clone');\n\nconst merge = require('lodash.merge');\n\nconst isPlainObject = require('lodash.isplainobject');\n\nclass FuelRest {\n  /**\r\n   * Constuctor of Fuel Rest object\r\n   * @constructor\r\n   * @param {FuelAuth|Object} options.auth - Instance of Fuel Auth or object used to initialise Fuel Auth Object\r\n   * @param {string} options.origin - endpoint to send api requests to\r\n   * @param {Object} options.headers - heads to merge onto all requests\r\n   */\n  constructor(options) {\n    const authOptions = options && options.auth || {}; // use fuel auth instance if applicable\n\n    if (authOptions instanceof FuelAuth) {\n      this.AuthClient = authOptions;\n    } else {\n      try {\n        this.AuthClient = new FuelAuth(authOptions);\n      } catch (err) {\n        throw err;\n      }\n    }\n\n    this.version = version;\n    this.origin = options.origin || options.restEndpoint || 'https://www.exacttargetapis.com';\n    this.defaultHeaders = Object.assign({\n      'User-Agent': `node-fuel/${this.version}`,\n      'Content-Type': 'application/json'\n    }, options.headers);\n    this.globalReqOptions = options.globalReqOptions || {};\n  }\n  /**\r\n   * Method that makes the api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {Object} options.retry - object of headers to add to this individual request\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  apiRequest(options, callback) {\n    if (!isPlainObject(options)) {\n      throw new TypeError('options argument is required');\n    }\n\n    if (typeof callback === 'function') {\n      return this._processRequest(options, callback);\n    }\n\n    return new Promise((resolve, reject) => {\n      this._processRequest(options, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  _processRequest(options, callback) {\n    const requestOptions = merge({}, this.globalReqOptions, options.auth);\n    this.AuthClient.getAccessToken(requestOptions).then(tokenInfo => {\n      if (!tokenInfo.accessToken) {\n        let error = new Error('No access token');\n        error.res = tokenInfo;\n        return Promise.reject(error);\n      }\n\n      return tokenInfo;\n    }).then(tokenInfo => {\n      let retry = options.retry || false;\n      const consolidatedOpts = {};\n      const authOptions = clone(options.auth);\n      const headers = options.headers;\n      options.uri = helpers.resolveUri(this.origin, options.uri);\n\n      if (this.AuthClient.authVersion === 2) {\n        options.uri = helpers.resolveUriForOAuth2(options.uri, tokenInfo.rest_instance_url);\n      }\n\n      options.headers = Object.assign({}, this.defaultHeaders, options.headers, {\n        // on a retry, the auth header is removed, so this will only add the header passed in\n        // if it's not the retry\n        Authorization: headers && headers.Authorization || 'Bearer ' + tokenInfo.accessToken\n      });\n      delete options.retry;\n      delete options.auth;\n      consolidatedOpts.req = options;\n      consolidatedOpts.auth = authOptions;\n      consolidatedOpts.accessToken = tokenInfo.accessToken;\n      consolidatedOpts.retry = retry;\n\n      this._makeRequest(consolidatedOpts, callback);\n    }).catch(err => callback(err, null));\n  }\n\n  _makeRequest(consolidatedOpts, callback) {\n    const requestOptions = merge({}, this.globalReqOptions, consolidatedOpts.req);\n    request(requestOptions, (err, res, body) => {\n      let parsedBody;\n      let isResponseJson;\n\n      if (err) {\n        callback(err, null);\n        return;\n      } // check if we should retry req\n\n\n      if (helpers.isValid401(res) && consolidatedOpts.retry) {\n        this.AuthClient.invalidateToken(consolidatedOpts.accessToken);\n        const retryOptions = Object.assign({}, requestOptions, {\n          auth: consolidatedOpts.auth,\n          retry: false,\n          headers: Object.assign({}, requestOptions.headers, {\n            Authorization: null\n          })\n        });\n        this.apiRequest(retryOptions, callback);\n        return;\n      }\n\n      isResponseJson = res.headers['content-type'] && res.headers['content-type'].split(';')[0].toLowerCase() === 'application/json';\n\n      if (!isResponseJson) {\n        callback(new Error('API did not return JSON'), null);\n        return;\n      } // trying to parse body\n\n\n      try {\n        parsedBody = JSON.parse(body);\n      } catch (err) {\n        parsedBody = body;\n      }\n\n      callback(null, {\n        res: res,\n        body: parsedBody\n      });\n    });\n  }\n  /**\r\n   * Method that makes the GET api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {Object} options.auth - force the retrieval of a new access token\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  get(options, callback) {\n    options.method = 'GET';\n    options.retry = true;\n    return this.apiRequest(options, callback);\n  }\n  /**\r\n   * Method that makes the POST api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  post(options, callback) {\n    options.method = 'POST';\n    options.retry = true;\n    return this.apiRequest(options, callback);\n  }\n  /**\r\n   * Method that makes the PUT api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  put(options, callback) {\n    options.method = 'PUT';\n    options.retry = true;\n    return this.apiRequest(options, callback);\n  }\n  /**\r\n   * Method that makes the PATCH api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  patch(options, callback) {\n    options.method = 'PATCH';\n    options.retry = true;\n    return this.apiRequest(options, callback);\n  }\n  /**\r\n   * Method that makes the DELETE api request\r\n   * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n   * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n   * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n   * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n   * @returns {?Promise}\r\n   */\n\n\n  delete(options, callback) {\n    options.method = 'DELETE';\n    options.retry = true;\n    return this.apiRequest(options, callback);\n  }\n\n}\n\nmodule.exports = FuelRest;","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/react-ui/node_modules/fuel-rest/lib/fuel-rest.js"],"names":["FuelAuth","require","helpers","request","version","clone","merge","isPlainObject","FuelRest","constructor","options","authOptions","auth","AuthClient","err","origin","restEndpoint","defaultHeaders","Object","assign","headers","globalReqOptions","apiRequest","callback","TypeError","_processRequest","Promise","resolve","reject","response","requestOptions","getAccessToken","then","tokenInfo","accessToken","error","Error","res","retry","consolidatedOpts","uri","resolveUri","authVersion","resolveUriForOAuth2","rest_instance_url","Authorization","req","_makeRequest","catch","body","parsedBody","isResponseJson","isValid401","invalidateToken","retryOptions","split","toLowerCase","JSON","parse","get","method","post","put","patch","delete","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2018, salesforce.com, inc.\r\n * All rights reserved.\r\n * Licensed under the BSD 3-Clause license.\r\n * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause\r\n */\r\n'use strict';\r\n\r\nconst FuelAuth = require('fuel-auth');\r\nconst helpers = require('./helpers');\r\nconst request = require('request');\r\nconst version = require('../package.json').version;\r\n\r\nconst clone = require('lodash.clone');\r\nconst merge = require('lodash.merge');\r\nconst isPlainObject = require('lodash.isplainobject');\r\n\r\nclass FuelRest {\r\n\t/**\r\n\t * Constuctor of Fuel Rest object\r\n\t * @constructor\r\n\t * @param {FuelAuth|Object} options.auth - Instance of Fuel Auth or object used to initialise Fuel Auth Object\r\n\t * @param {string} options.origin - endpoint to send api requests to\r\n\t * @param {Object} options.headers - heads to merge onto all requests\r\n\t */\r\n\tconstructor(options) {\r\n\t\tconst authOptions = (options && options.auth) || {};\r\n\r\n\t\t// use fuel auth instance if applicable\r\n\t\tif (authOptions instanceof FuelAuth) {\r\n\t\t\tthis.AuthClient = authOptions;\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tthis.AuthClient = new FuelAuth(authOptions);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.version = version;\r\n\t\tthis.origin = options.origin || options.restEndpoint || 'https://www.exacttargetapis.com';\r\n\t\tthis.defaultHeaders = Object.assign(\r\n\t\t\t{\r\n\t\t\t\t'User-Agent': `node-fuel/${this.version}`,\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\toptions.headers\r\n\t\t);\r\n\t\tthis.globalReqOptions = options.globalReqOptions || {};\r\n\t}\r\n\t/**\r\n\t * Method that makes the api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {Object} options.retry - object of headers to add to this individual request\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tapiRequest(options, callback) {\r\n\t\tif (!isPlainObject(options)) {\r\n\t\t\tthrow new TypeError('options argument is required');\r\n\t\t}\r\n\r\n\t\tif (typeof callback === 'function') {\r\n\t\t\treturn this._processRequest(options, callback);\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._processRequest(options, (err, response) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn reject(err);\r\n\t\t\t\t}\r\n\t\t\t\tresolve(response);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t_processRequest(options, callback) {\r\n\r\n\t\tconst requestOptions = merge(\r\n\t\t\t{},\r\n\t\t\tthis.globalReqOptions,\r\n\t\t\toptions.auth\r\n\t\t);\r\n\r\n\t\tthis.AuthClient.getAccessToken(requestOptions)\r\n\t\t\t.then(tokenInfo => {\r\n\t\t\t\tif (!tokenInfo.accessToken) {\r\n\t\t\t\t\tlet error = new Error('No access token');\r\n\t\t\t\t\terror.res = tokenInfo;\r\n\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t}\r\n\t\t\t\treturn tokenInfo;\r\n\t\t\t})\r\n\t\t\t.then(tokenInfo => {\r\n\t\t\t\tlet retry = options.retry || false;\r\n\t\t\t\tconst consolidatedOpts = {};\r\n\t\t\t\tconst authOptions = clone(options.auth);\r\n\t\t\t\tconst headers = options.headers;\r\n\r\n\t\t\t\toptions.uri = helpers.resolveUri(this.origin, options.uri);\r\n\t\t\t\tif(this.AuthClient.authVersion === 2){\r\n\t\t\t\t\toptions.uri = helpers.resolveUriForOAuth2(options.uri, tokenInfo.rest_instance_url);\r\n\t\t\t\t}\r\n\t\t\t\toptions.headers = Object.assign({}, this.defaultHeaders, options.headers, {\r\n\t\t\t\t\t// on a retry, the auth header is removed, so this will only add the header passed in\r\n\t\t\t\t\t// if it's not the retry\r\n\t\t\t\t\tAuthorization: (headers && headers.Authorization) || 'Bearer ' + tokenInfo.accessToken\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdelete options.retry;\r\n\t\t\t\tdelete options.auth;\r\n\r\n\t\t\t\tconsolidatedOpts.req = options;\r\n\t\t\t\tconsolidatedOpts.auth = authOptions;\r\n\t\t\t\tconsolidatedOpts.accessToken = tokenInfo.accessToken;\r\n\t\t\t\tconsolidatedOpts.retry = retry;\r\n\r\n\t\t\t\tthis._makeRequest(consolidatedOpts, callback);\r\n\t\t\t})\r\n\t\t\t.catch(err => callback(err, null));\r\n\t}\r\n\t_makeRequest(consolidatedOpts, callback) {\r\n\t\tconst requestOptions = merge(\r\n\t\t\t{},\r\n\t\t\tthis.globalReqOptions,\r\n\t\t\tconsolidatedOpts.req\r\n\t\t);\r\n\t\t\r\n\t\trequest(requestOptions, (err, res, body) => {\r\n\t\t\tlet parsedBody;\r\n\t\t\tlet isResponseJson;\r\n\r\n\t\t\tif (err) {\r\n\t\t\t\tcallback(err, null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// check if we should retry req\r\n\t\t\tif (helpers.isValid401(res) && consolidatedOpts.retry) {\r\n\t\t\t\tthis.AuthClient.invalidateToken(consolidatedOpts.accessToken);\r\n\t\t\t\tconst retryOptions = Object.assign({}, requestOptions, {\r\n\t\t\t\t\tauth: consolidatedOpts.auth,\r\n\t\t\t\t\tretry: false,\r\n\t\t\t\t\theaders: Object.assign({}, requestOptions.headers, {\r\n\t\t\t\t\t\tAuthorization: null\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\tthis.apiRequest(retryOptions, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tisResponseJson =\r\n\t\t\t\tres.headers['content-type'] &&\r\n\t\t\t\tres.headers['content-type'].split(';')[0].toLowerCase() === 'application/json';\r\n\r\n\t\t\tif (!isResponseJson) {\r\n\t\t\t\tcallback(new Error('API did not return JSON'), null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// trying to parse body\r\n\t\t\ttry {\r\n\t\t\t\tparsedBody = JSON.parse(body);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tparsedBody = body;\r\n\t\t\t}\r\n\r\n\t\t\tcallback(null, {\r\n\t\t\t\tres: res,\r\n\t\t\t\tbody: parsedBody\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Method that makes the GET api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {Object} options.auth - force the retrieval of a new access token\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tget(options, callback) {\r\n\t\toptions.method = 'GET';\r\n\t\toptions.retry = true;\r\n\r\n\t\treturn this.apiRequest(options, callback);\r\n\t}\r\n\t/**\r\n\t * Method that makes the POST api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tpost(options, callback) {\r\n\t\toptions.method = 'POST';\r\n\t\toptions.retry = true;\r\n\r\n\t\treturn this.apiRequest(options, callback);\r\n\t}\r\n\t/**\r\n\t * Method that makes the PUT api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tput(options, callback) {\r\n\t\toptions.method = 'PUT';\r\n\t\toptions.retry = true;\r\n\r\n\t\treturn this.apiRequest(options, callback);\r\n\t}\r\n\t/**\r\n\t * Method that makes the PATCH api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tpatch(options, callback) {\r\n\t\toptions.method = 'PATCH';\r\n\t\toptions.retry = true;\r\n\r\n\t\treturn this.apiRequest(options, callback);\r\n\t}\r\n\t/**\r\n\t * Method that makes the DELETE api request\r\n\t * @param {Object} options - request modules options. see https://github.com/request/request#requestoptions-callback\r\n\t * @param {boolean} options.auth.force - force the retrieval of a new access token\r\n\t * @param {boolean} [options.retry=true] - force a retry if request fails due to token expiration\r\n\t * @param {function} callback - callback to give results to. if not specified promise will be returned\r\n\t * @returns {?Promise}\r\n\t */\r\n\tdelete(options, callback) {\r\n\t\toptions.method = 'DELETE';\r\n\t\toptions.retry = true;\r\n\r\n\t\treturn this.apiRequest(options, callback);\r\n\t}\r\n}\r\n\r\nmodule.exports = FuelRest;\r\n"]},"metadata":{},"sourceType":"script"}