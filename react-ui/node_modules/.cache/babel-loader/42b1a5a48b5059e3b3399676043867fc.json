{"ast":null,"code":"import sfmcClient from './sfmcClient';\nconst clientId = process.env.REACT_APP_SFMC_CLIENTID;\nconst clientSecret = process.env.REACT_APP_SFMC_CLIENTSECRET;\nconst stack = process.env.REACT_APP_SFMC_STACK;\nconst origin = process.env.REACT_APP_SFMC_ORIGIN;\nconst authOrigin = process.env.REACT_APP_SFMC_AUTHORIGIN;\nconst soapOrigin = process.env.REACT_APP_SFMC_SOAPORIGIN;\nconst redirecturi = encodeURIComponent('https://127.0.0.1:3000');\nlet functions = {\n  getAllDataExtensions: () => {\n    var options = {\n      props: ['ObjectID', 'PartnerKey', 'CustomerKey', 'Name', 'CreatedDate', 'ModifiedDate', 'Client.ID', 'Description', 'IsSendable', 'IsTestable', 'SendableDataExtensionField.Name', 'SendableSubscriberField.Name', 'Template.CustomerKey', 'CategoryID', 'Status', 'IsPlatformObject', 'DataRetentionPeriodLength', 'DataRetentionPeriodUnitOfMeasure', 'RowBasedRetention', 'ResetRetentionPeriodOnImport', 'DeleteAtEndOfRetentionPeriod', 'RetainUntil', 'DataRetentionPeriod'],\n      filter: {\n        leftOperand: 'Client.ID',\n        operator: 'isNotNull',\n        rightOperand: ''\n      }\n    };\n    const de = sfmcClient.dataExtension(options);\n    let dataExtensionsResult = new Promise((resolve, reject) => {\n      de.get((err, res) => {\n        if (err) console.log(err);\n        if (res) resolve(res.body.Results);\n      });\n    });\n    return dataExtensionsResult;\n  },\n  getAuthCode: () => {\n    fetch(`${authOrigin}/v2/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirecturi}`).then(response => response.json());\n  }\n};\nexport default functions;","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/src/sfmcHelper.js"],"names":["sfmcClient","clientId","process","env","REACT_APP_SFMC_CLIENTID","clientSecret","REACT_APP_SFMC_CLIENTSECRET","stack","REACT_APP_SFMC_STACK","origin","REACT_APP_SFMC_ORIGIN","authOrigin","REACT_APP_SFMC_AUTHORIGIN","soapOrigin","REACT_APP_SFMC_SOAPORIGIN","redirecturi","encodeURIComponent","functions","getAllDataExtensions","options","props","filter","leftOperand","operator","rightOperand","de","dataExtension","dataExtensionsResult","Promise","resolve","reject","get","err","res","console","log","body","Results","getAuthCode","fetch","then","response","json"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAA7B;AACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,2BAAjC;AACA,MAAMC,KAAK,GAAGL,OAAO,CAACC,GAAR,CAAYK,oBAA1B;AACA,MAAMC,MAAM,GAAGP,OAAO,CAACC,GAAR,CAAYO,qBAA3B;AACA,MAAMC,UAAU,GAAGT,OAAO,CAACC,GAAR,CAAYS,yBAA/B;AACA,MAAMC,UAAU,GAAGX,OAAO,CAACC,GAAR,CAAYW,yBAA/B;AACA,MAAMC,WAAW,GAAGC,kBAAkB,CAAC,wBAAD,CAAtC;AAEA,IAAIC,SAAS,GAAG;AAEdC,EAAAA,oBAAoB,EAAE,MAAM;AAC1B,QAAIC,OAAO,GAAG;AACVC,MAAAA,KAAK,EAAE,CACP,UADO,EAEP,YAFO,EAGP,aAHO,EAIP,MAJO,EAKP,aALO,EAMP,cANO,EAOP,WAPO,EAQP,aARO,EASP,YATO,EAUP,YAVO,EAWP,iCAXO,EAYP,8BAZO,EAaP,sBAbO,EAcP,YAdO,EAeP,QAfO,EAgBP,kBAhBO,EAiBP,2BAjBO,EAkBP,kCAlBO,EAmBP,mBAnBO,EAoBP,8BApBO,EAqBP,8BArBO,EAsBP,aAtBO,EAuBP,qBAvBO,CADG;AA0BVC,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE,WADP;AAENC,QAAAA,QAAQ,EAAE,WAFJ;AAGNC,QAAAA,YAAY,EAAE;AAHR;AA1BE,KAAd;AAiCA,UAAMC,EAAE,GAAGzB,UAAU,CAAC0B,aAAX,CAAyBP,OAAzB,CAAX;AAEA,QAAIQ,oBAAoB,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxDL,MAAAA,EAAE,CAACM,GAAH,CAAO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrB,YAAID,GAAJ,EAASE,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACT,YAAIC,GAAJ,EAASJ,OAAO,CAACI,GAAG,CAACG,IAAJ,CAASC,OAAV,CAAP;AACR,OAHD;AAIH,KAL0B,CAA3B;AAOA,WAAOV,oBAAP;AACD,GA9Ca;AAgDdW,EAAAA,WAAW,EAAE,MAAM;AACjBC,IAAAA,KAAK,CAAE,GAAE5B,UAAW,8CAA6CV,QAAS,iBAAgBc,WAAY,EAAjG,CAAL,CACGyB,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB;AAED;AAnDa,CAAhB;AAsDA,eAAezB,SAAf","sourcesContent":["import sfmcClient from './sfmcClient'\r\n\r\nconst clientId = process.env.REACT_APP_SFMC_CLIENTID;\r\nconst clientSecret = process.env.REACT_APP_SFMC_CLIENTSECRET;\r\nconst stack = process.env.REACT_APP_SFMC_STACK;\r\nconst origin = process.env.REACT_APP_SFMC_ORIGIN;\r\nconst authOrigin = process.env.REACT_APP_SFMC_AUTHORIGIN;\r\nconst soapOrigin = process.env.REACT_APP_SFMC_SOAPORIGIN;\r\nconst redirecturi = encodeURIComponent('https://127.0.0.1:3000')\r\n\r\nlet functions = {\r\n\r\n  getAllDataExtensions: () => {\r\n    var options = {\r\n        props: [\r\n        'ObjectID',\r\n        'PartnerKey',\r\n        'CustomerKey',\r\n        'Name',\r\n        'CreatedDate',\r\n        'ModifiedDate',\r\n        'Client.ID',\r\n        'Description',\r\n        'IsSendable',\r\n        'IsTestable',\r\n        'SendableDataExtensionField.Name',\r\n        'SendableSubscriberField.Name',\r\n        'Template.CustomerKey',\r\n        'CategoryID',\r\n        'Status',\r\n        'IsPlatformObject',\r\n        'DataRetentionPeriodLength',\r\n        'DataRetentionPeriodUnitOfMeasure',\r\n        'RowBasedRetention',\r\n        'ResetRetentionPeriodOnImport',\r\n        'DeleteAtEndOfRetentionPeriod',\r\n        'RetainUntil',\r\n        'DataRetentionPeriod'\r\n        ],\r\n        filter: {\r\n          leftOperand: 'Client.ID',\r\n          operator: 'isNotNull',\r\n          rightOperand: ''\r\n        }\r\n    };\r\n  \r\n    const de = sfmcClient.dataExtension(options);\r\n  \r\n    let dataExtensionsResult = new Promise((resolve, reject) => {\r\n        de.get((err, res) => {\r\n        if (err) console.log(err);\r\n        if (res) resolve(res.body.Results);\r\n        });\r\n    });\r\n  \r\n    return dataExtensionsResult;\r\n  },\r\n\r\n  getAuthCode: () => {\r\n    fetch(`${authOrigin}/v2/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirecturi}`)\r\n      .then(response => response.json())\r\n  }\r\n}\r\n\r\nexport default functions\r\n"]},"metadata":{},"sourceType":"module"}