{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var XMLStringifier,\n      bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = function () {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n\n      ref = options.stringify || {};\n\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      val = '' + val || '';\n\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      val = '' + val || '';\n\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      val = '' + val || '';\n\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      val = '' + val || '';\n\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function (val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function (str) {\n      var regex, res;\n\n      if (this.options.noValidation) {\n        return str;\n      }\n\n      regex = '';\n\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function (str) {\n      var regex;\n\n      if (this.options.noValidation) {\n        return str;\n      }\n\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function (str) {\n      var ampregex;\n\n      if (this.options.noValidation) {\n        return str;\n      }\n\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function (str) {\n      var ampregex;\n\n      if (this.options.noValidation) {\n        return str;\n      }\n\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n  }();\n}).call(this);","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/react-ui/node_modules/xmlbuilder/lib/XMLStringifier.js"],"names":["XMLStringifier","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","module","exports","options","assertLegalName","assertLegalChar","key","ref","value","version","stringify","call","prototype","name","val","noValidation","text","textEscape","cdata","replace","comment","match","Error","raw","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey","str","regex","res","index","ampregex","noDoubleEncoding"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,cAAJ;AAAA,MACEC,IAAI,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAgB;AAAE,WAAO,YAAU;AAAE,aAAOD,EAAE,CAACE,KAAH,CAASD,EAAT,EAAaE,SAAb,CAAP;AAAiC,KAApD;AAAuD,GADlF;AAAA,MAEEC,OAAO,GAAG,GAAGC,cAFf;;AAIAC,EAAAA,MAAM,CAACC,OAAP,GAAiBT,cAAc,GAAI,YAAW;AAC5C,aAASA,cAAT,CAAwBU,OAAxB,EAAiC;AAC/B,WAAKC,eAAL,GAAuBV,IAAI,CAAC,KAAKU,eAAN,EAAuB,IAAvB,CAA3B;AACA,WAAKC,eAAL,GAAuBX,IAAI,CAAC,KAAKW,eAAN,EAAuB,IAAvB,CAA3B;AACA,UAAIC,GAAJ,EAASC,GAAT,EAAcC,KAAd;AACAL,MAAAA,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;AACA,WAAKA,OAAL,GAAeA,OAAf;;AACA,UAAI,CAAC,KAAKA,OAAL,CAAaM,OAAlB,EAA2B;AACzB,aAAKN,OAAL,CAAaM,OAAb,GAAuB,KAAvB;AACD;;AACDF,MAAAA,GAAG,GAAGJ,OAAO,CAACO,SAAR,IAAqB,EAA3B;;AACA,WAAKJ,GAAL,IAAYC,GAAZ,EAAiB;AACf,YAAI,CAACR,OAAO,CAACY,IAAR,CAAaJ,GAAb,EAAkBD,GAAlB,CAAL,EAA6B;AAC7BE,QAAAA,KAAK,GAAGD,GAAG,CAACD,GAAD,CAAX;AACA,aAAKA,GAAL,IAAYE,KAAZ;AACD;AACF;;AAEDf,IAAAA,cAAc,CAACmB,SAAf,CAAyBC,IAAzB,GAAgC,UAASC,GAAT,EAAc;AAC5C,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKV,eAAL,CAAqB,KAAKU,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBI,IAAzB,GAAgC,UAASF,GAAT,EAAc;AAC5C,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKY,UAAL,CAAgB,KAAKH,GAAL,IAAY,EAA5B,CAArB,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBM,KAAzB,GAAiC,UAASJ,GAAT,EAAc;AAC7C,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACDA,MAAAA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAACK,OAAJ,CAAY,KAAZ,EAAmB,iBAAnB,CAAN;AACA,aAAO,KAAKd,eAAL,CAAqBS,GAArB,CAAP;AACD,KAPD;;AASArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBQ,OAAzB,GAAmC,UAASN,GAAT,EAAc;AAC/C,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACDA,MAAAA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;AACA,UAAIA,GAAG,CAACO,KAAJ,CAAU,IAAV,CAAJ,EAAqB;AACnB,cAAM,IAAIC,KAAJ,CAAU,+CAA+CR,GAAzD,CAAN;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqBS,GAArB,CAAP;AACD,KATD;;AAWArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBW,GAAzB,GAA+B,UAAST,GAAT,EAAc;AAC3C,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKA,GAAL,IAAY,EAAnB;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBY,QAAzB,GAAoC,UAASV,GAAT,EAAc;AAChD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKoB,SAAL,CAAeX,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAjC,CAArB,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBc,SAAzB,GAAqC,UAASZ,GAAT,EAAc;AACjD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBe,QAAzB,GAAoC,UAASb,GAAT,EAAc;AAChD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACDA,MAAAA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;AACA,UAAIA,GAAG,CAACO,KAAJ,CAAU,KAAV,CAAJ,EAAsB;AACpB,cAAM,IAAIC,KAAJ,CAAU,2CAA2CR,GAArD,CAAN;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqBS,GAArB,CAAP;AACD,KATD;;AAWArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBgB,UAAzB,GAAsC,UAASd,GAAT,EAAc;AAClD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACDA,MAAAA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;AACA,UAAI,CAACA,GAAG,CAACO,KAAJ,CAAU,WAAV,CAAL,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,6BAA6BR,GAAvC,CAAN;AACD;;AACD,aAAOA,GAAP;AACD,KATD;;AAWArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBiB,WAAzB,GAAuC,UAASf,GAAT,EAAc;AACnD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACDA,MAAAA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;AACA,UAAI,CAACA,GAAG,CAACO,KAAJ,CAAU,+BAAV,CAAL,EAAiD;AAC/C,cAAM,IAAIC,KAAJ,CAAU,uBAAuBR,GAAjC,CAAN;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqBS,GAArB,CAAP;AACD,KATD;;AAWArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBkB,aAAzB,GAAyC,UAAShB,GAAT,EAAc;AACrD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,UAAIA,GAAJ,EAAS;AACP,eAAO,KAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF,KATD;;AAWArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBmB,QAAzB,GAAoC,UAASjB,GAAT,EAAc;AAChD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBoB,QAAzB,GAAoC,UAASlB,GAAT,EAAc;AAChD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBqB,eAAzB,GAA2C,UAASnB,GAAT,EAAc;AACvD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBsB,UAAzB,GAAsC,UAASpB,GAAT,EAAc;AAClD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBuB,aAAzB,GAAyC,UAASrB,GAAT,EAAc;AACrD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyBwB,cAAzB,GAA0C,UAAStB,GAAT,EAAc;AACtD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyByB,QAAzB,GAAoC,UAASvB,GAAT,EAAc;AAChD,UAAI,KAAKX,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAOD,GAAP;AACD;;AACD,aAAO,KAAKT,eAAL,CAAqB,KAAKS,GAAL,IAAY,EAAjC,CAAP;AACD,KALD;;AAOArB,IAAAA,cAAc,CAACmB,SAAf,CAAyB0B,aAAzB,GAAyC,GAAzC;AAEA7C,IAAAA,cAAc,CAACmB,SAAf,CAAyB2B,YAAzB,GAAwC,GAAxC;AAEA9C,IAAAA,cAAc,CAACmB,SAAf,CAAyB4B,cAAzB,GAA0C,OAA1C;AAEA/C,IAAAA,cAAc,CAACmB,SAAf,CAAyB6B,eAAzB,GAA2C,QAA3C;AAEAhD,IAAAA,cAAc,CAACmB,SAAf,CAAyB8B,iBAAzB,GAA6C,UAA7C;AAEAjD,IAAAA,cAAc,CAACmB,SAAf,CAAyB+B,aAAzB,GAAyC,MAAzC;;AAEAlD,IAAAA,cAAc,CAACmB,SAAf,CAAyBP,eAAzB,GAA2C,UAASuC,GAAT,EAAc;AACvD,UAAIC,KAAJ,EAAWC,GAAX;;AACA,UAAI,KAAK3C,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAO6B,GAAP;AACD;;AACDC,MAAAA,KAAK,GAAG,EAAR;;AACA,UAAI,KAAK1C,OAAL,CAAaM,OAAb,KAAyB,KAA7B,EAAoC;AAClCoC,QAAAA,KAAK,GAAG,+GAAR;;AACA,YAAIC,GAAG,GAAGF,GAAG,CAACvB,KAAJ,CAAUwB,KAAV,CAAV,EAA4B;AAC1B,gBAAM,IAAIvB,KAAJ,CAAU,kCAAkCsB,GAAlC,GAAwC,YAAxC,GAAuDE,GAAG,CAACC,KAArE,CAAN;AACD;AACF,OALD,MAKO,IAAI,KAAK5C,OAAL,CAAaM,OAAb,KAAyB,KAA7B,EAAoC;AACzCoC,QAAAA,KAAK,GAAG,2FAAR;;AACA,YAAIC,GAAG,GAAGF,GAAG,CAACvB,KAAJ,CAAUwB,KAAV,CAAV,EAA4B;AAC1B,gBAAM,IAAIvB,KAAJ,CAAU,kCAAkCsB,GAAlC,GAAwC,YAAxC,GAAuDE,GAAG,CAACC,KAArE,CAAN;AACD;AACF;;AACD,aAAOH,GAAP;AACD,KAlBD;;AAoBAnD,IAAAA,cAAc,CAACmB,SAAf,CAAyBR,eAAzB,GAA2C,UAASwC,GAAT,EAAc;AACvD,UAAIC,KAAJ;;AACA,UAAI,KAAK1C,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAO6B,GAAP;AACD;;AACD,WAAKvC,eAAL,CAAqBuC,GAArB;AACAC,MAAAA,KAAK,GAAG,8WAAR;;AACA,UAAI,CAACD,GAAG,CAACvB,KAAJ,CAAUwB,KAAV,CAAL,EAAuB;AACrB,cAAM,IAAIvB,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,aAAOsB,GAAP;AACD,KAXD;;AAaAnD,IAAAA,cAAc,CAACmB,SAAf,CAAyBK,UAAzB,GAAsC,UAAS2B,GAAT,EAAc;AAClD,UAAII,QAAJ;;AACA,UAAI,KAAK7C,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAO6B,GAAP;AACD;;AACDI,MAAAA,QAAQ,GAAG,KAAK7C,OAAL,CAAa8C,gBAAb,GAAgC,aAAhC,GAAgD,IAA3D;AACA,aAAOL,GAAG,CAACzB,OAAJ,CAAY6B,QAAZ,EAAsB,OAAtB,EAA+B7B,OAA/B,CAAuC,IAAvC,EAA6C,MAA7C,EAAqDA,OAArD,CAA6D,IAA7D,EAAmE,MAAnE,EAA2EA,OAA3E,CAAmF,KAAnF,EAA0F,OAA1F,CAAP;AACD,KAPD;;AASA1B,IAAAA,cAAc,CAACmB,SAAf,CAAyBa,SAAzB,GAAqC,UAASmB,GAAT,EAAc;AACjD,UAAII,QAAJ;;AACA,UAAI,KAAK7C,OAAL,CAAaY,YAAjB,EAA+B;AAC7B,eAAO6B,GAAP;AACD;;AACDI,MAAAA,QAAQ,GAAG,KAAK7C,OAAL,CAAa8C,gBAAb,GAAgC,aAAhC,GAAgD,IAA3D;AACA,aAAOL,GAAG,CAACzB,OAAJ,CAAY6B,QAAZ,EAAsB,OAAtB,EAA+B7B,OAA/B,CAAuC,IAAvC,EAA6C,MAA7C,EAAqDA,OAArD,CAA6D,IAA7D,EAAmE,QAAnE,EAA6EA,OAA7E,CAAqF,KAArF,EAA4F,OAA5F,EAAqGA,OAArG,CAA6G,KAA7G,EAAoH,OAApH,EAA6HA,OAA7H,CAAqI,KAArI,EAA4I,OAA5I,CAAP;AACD,KAPD;;AASA,WAAO1B,cAAP;AAED,GAvOiC,EAAlC;AAyOD,CA9OD,EA8OGkB,IA9OH,CA8OQ,IA9OR","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var regex, res;\n      if (this.options.noValidation) {\n        return str;\n      }\n      regex = '';\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function(str) {\n      var regex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}