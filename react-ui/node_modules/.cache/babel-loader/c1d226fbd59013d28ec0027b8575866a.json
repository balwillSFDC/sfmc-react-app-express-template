{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport sfmcHelper from './sfmcHelper';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { reducer } from './reducer';\n\nconst customMiddleWare = store => next => action => {\n  switch (action.type) {\n    case 'PAGE_LOAD_INITIATED':\n      return sfmcHelper.getAuthCode();\n\n    case 'PAGE_LOAD_SUCCESSFUL':\n      return sfmcHelper.getAccessToken(action.payload);\n  }\n\n  return next(action);\n};\n\nconst middlewareEnhancer = composeWithDevTools(applyMiddleware(logger, customMiddleWare, thunkMiddleware));\nlet persistConfig = {\n  key: 'root',\n  storage: storage\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\nlet store = createStore(persistedReducer, middlewareEnhancer);\nlet persistor = persistStore(store);\nexport { store, persistor };","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/src/store.js"],"names":["createStore","applyMiddleware","persistStore","persistReducer","storage","composeWithDevTools","sfmcHelper","thunkMiddleware","logger","reducer","customMiddleWare","store","next","action","type","getAuthCode","getAccessToken","payload","middlewareEnhancer","persistConfig","key","persistedReducer","persistor"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAIA,MAAMC,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAClD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,qBAAL;AACE,aAAOR,UAAU,CAACS,WAAX,EAAP;;AACF,SAAK,sBAAL;AACE,aAAOT,UAAU,CAACU,cAAX,CAA0BH,MAAM,CAACI,OAAjC,CAAP;AAJJ;;AAOA,SAAOL,IAAI,CAACC,MAAD,CAAX;AACD,CATD;;AAWA,MAAMK,kBAAkB,GAAGb,mBAAmB,CAACJ,eAAe,CAACO,MAAD,EAASE,gBAAT,EAA2BH,eAA3B,CAAhB,CAA9C;AAEA,IAAIY,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBhB,EAAAA,OAAO,EAAEA;AAFS,CAApB;AAKA,MAAMiB,gBAAgB,GAAGlB,cAAc,CAACgB,aAAD,EAAgBV,OAAhB,CAAvC;AAEA,IAAIE,KAAK,GAAGX,WAAW,CAACqB,gBAAD,EAAmBH,kBAAnB,CAAvB;AACA,IAAII,SAAS,GAAGpB,YAAY,CAACS,KAAD,CAA5B;AAEA,SAAQA,KAAR,EAAeW,SAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport sfmcHelper from './sfmcHelper'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { reducer } from './reducer'\r\n\r\n\r\n\r\nconst customMiddleWare = store => next => action => {\r\n  switch(action.type) {\r\n    case 'PAGE_LOAD_INITIATED':\r\n      return sfmcHelper.getAuthCode()\r\n    case 'PAGE_LOAD_SUCCESSFUL':\r\n      return sfmcHelper.getAccessToken(action.payload)\r\n  }\r\n  \r\n  return next(action)\r\n}\r\n\r\nconst middlewareEnhancer = composeWithDevTools(applyMiddleware(logger, customMiddleWare, thunkMiddleware))\r\n\r\nlet persistConfig = {\r\n  key: 'root',\r\n  storage: storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\nlet store = createStore(persistedReducer, middlewareEnhancer)\r\nlet persistor = persistStore(store)\r\n\r\nexport {store, persistor}\r\n"]},"metadata":{},"sourceType":"module"}