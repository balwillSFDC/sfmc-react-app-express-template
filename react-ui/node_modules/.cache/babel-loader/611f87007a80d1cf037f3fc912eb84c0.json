{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nclass CacheService {\n  constructor({\n    clientId,\n    clientSecret\n  }) {\n    this._identifier = `${clientId}-${clientSecret}`;\n    this._cacheDir = path.join(__dirname, '../../.cache');\n    this._cacheMinutes = 10;\n  }\n\n  get() {\n    return this._getOrCreateFile().then(cache => {\n      const data = cache[this._identifier];\n      const now = new Date().getTime();\n\n      if (!data || !data.expires || data.expires < now) {\n        return {};\n      } else {\n        return data;\n      }\n    });\n  }\n\n  write(url) {\n    const expires = new Date().getTime() + this._cacheMinutes * 60 * 1000;\n    return this._getOrCreateFile().then(cache => {\n      cache[this._identifier] = {\n        expires,\n        url\n      };\n      return this._writeFile(JSON.stringify(cache)).then(() => undefined);\n    });\n  }\n\n  clear() {\n    return this._getOrCreateFile().then(cache => {\n      delete cache[this._identifier];\n      return this._writeFile(JSON.stringify(cache));\n    });\n  }\n\n  _getOrCreateFile() {\n    return this._checkFile().then(exists => {\n      if (!exists) {\n        return this._writeFile({\n          flag: 'wx'\n        }).then(() => {\n          return {};\n        });\n      } else {\n        return this._readFile().then(data => {\n          let cache = {};\n\n          try {\n            cache = JSON.parse(data);\n          } catch (err) {}\n\n          return cache || {};\n        });\n      }\n    });\n  }\n\n  _checkFile() {\n    return new Promise(resolve => {\n      fs.access(this._cacheDir, fs.constants.F_OK | fs.constants.W_OK, err => {\n        if (err) {\n          if (err.code !== 'ENOENT') {\n            throw new Error(err);\n          }\n\n          resolve(false);\n        }\n\n        resolve(true);\n      });\n    });\n  }\n\n  _writeFile(contents) {\n    return new Promise((resolve, reject) => {\n      fs.writeFile(this._cacheDir, contents, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  _readFile() {\n    return new Promise((resolve, reject) => {\n      fs.readFile(this._cacheDir, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = CacheService;","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/node_modules/sfmc-fuelsdk-node/lib/services/CacheService.js"],"names":["fs","require","path","CacheService","constructor","clientId","clientSecret","_identifier","_cacheDir","join","__dirname","_cacheMinutes","get","_getOrCreateFile","then","cache","data","now","Date","getTime","expires","write","url","_writeFile","JSON","stringify","undefined","clear","_checkFile","exists","flag","_readFile","parse","err","Promise","resolve","access","constants","F_OK","W_OK","code","Error","contents","reject","writeFile","readFile","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\n\r\n\r\nclass CacheService {\r\n\r\n    constructor({clientId, clientSecret}) {\r\n        this._identifier = `${clientId}-${clientSecret}`;\r\n        this._cacheDir = path.join(__dirname, '../../.cache');\r\n        this._cacheMinutes = 10;\r\n    }\r\n\r\n    get() {\r\n        return this._getOrCreateFile().then(cache => {\r\n            const data = cache[this._identifier];\r\n            const now = new Date().getTime();\r\n            if (!data || !data.expires || data.expires < now) {\r\n                return {};\r\n            } else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n\r\n    write(url) {\r\n        const expires = new Date().getTime() + this._cacheMinutes * 60 * 1000;\r\n        return this._getOrCreateFile().then(cache => {\r\n            cache[this._identifier] = {\r\n                expires,\r\n                url\r\n            };\r\n            return this._writeFile(JSON.stringify(cache)).then(() => undefined);\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        return this._getOrCreateFile().then(cache => {\r\n            delete cache[this._identifier];\r\n            return this._writeFile(JSON.stringify(cache));\r\n        });\r\n    }\r\n\r\n    _getOrCreateFile() {\r\n        return this._checkFile().then(exists => {\r\n            if (!exists) {\r\n                return this._writeFile({flag: 'wx'}).then(() => {\r\n                    return {};\r\n                });\r\n            } else {\r\n                return this._readFile().then(data => {\r\n                    let cache = {};\r\n                    try {\r\n                        cache = JSON.parse(data)\r\n                    } catch (err) {\r\n                    }\r\n                    return cache || {};\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    _checkFile() {\r\n        return new Promise(resolve => {\r\n            fs.access(this._cacheDir, fs.constants.F_OK | fs.constants.W_OK, err => {\r\n                if (err) {\r\n                    if (err.code !== 'ENOENT') {\r\n                        throw new Error(err);\r\n                    }\r\n                    resolve(false)\r\n                }\r\n                resolve(true);\r\n            });\r\n        })\r\n    }\r\n\r\n    _writeFile(contents) {\r\n        return new Promise((resolve, reject) => {\r\n            fs.writeFile(this._cacheDir, contents, err => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    _readFile() {\r\n        return new Promise((resolve, reject) => {\r\n            fs.readFile(this._cacheDir, (err, data) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(data);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CacheService;"]},"metadata":{},"sourceType":"script"}