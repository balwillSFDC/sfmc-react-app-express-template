{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var NodeType,\n      XMLNode,\n      XMLRaw,\n      extend = function (child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = function (superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function () {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function (options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n  }(XMLNode);\n}).call(this);","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/node_modules/xmlbuilder/lib/XMLRaw.js"],"names":["NodeType","XMLNode","XMLRaw","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","require","module","exports","superClass","text","Error","debugInfo","type","Raw","value","stringify","raw","clone","Object","create","toString","options","writer","filterOptions"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ;AAAA,MAAcC,OAAd;AAAA,MAAuBC,MAAvB;AAAA,MACEC,MAAM,GAAG,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAAE,SAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIE,OAAO,CAACC,IAAR,CAAaH,MAAb,EAAqBC,GAArB,CAAJ,EAA+BF,KAAK,CAACE,GAAD,CAAL,GAAaD,MAAM,CAACC,GAAD,CAAnB;AAA2B;;AAAC,aAASG,IAAT,GAAgB;AAAE,WAAKC,WAAL,GAAmBN,KAAnB;AAA2B;;AAACK,IAAAA,IAAI,CAACE,SAAL,GAAiBN,MAAM,CAACM,SAAxB;AAAmCP,IAAAA,KAAK,CAACO,SAAN,GAAkB,IAAIF,IAAJ,EAAlB;AAA8BL,IAAAA,KAAK,CAACQ,SAAN,GAAkBP,MAAM,CAACM,SAAzB;AAAoC,WAAOP,KAAP;AAAe,GAD5R;AAAA,MAEEG,OAAO,GAAG,GAAGM,cAFf;;AAIAb,EAAAA,QAAQ,GAAGc,OAAO,CAAC,YAAD,CAAlB;AAEAb,EAAAA,OAAO,GAAGa,OAAO,CAAC,WAAD,CAAjB;;AAEAC,EAAAA,MAAM,CAACC,OAAP,GAAiBd,MAAM,GAAI,UAASe,UAAT,EAAqB;AAC9Cd,IAAAA,MAAM,CAACD,MAAD,EAASe,UAAT,CAAN;;AAEA,aAASf,MAAT,CAAgBG,MAAhB,EAAwBa,IAAxB,EAA8B;AAC5BhB,MAAAA,MAAM,CAACU,SAAP,CAAiBF,WAAjB,CAA6BF,IAA7B,CAAkC,IAAlC,EAAwCH,MAAxC;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAuB,KAAKC,SAAL,EAAjC,CAAN;AACD;;AACD,WAAKC,IAAL,GAAYrB,QAAQ,CAACsB,GAArB;AACA,WAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeC,GAAf,CAAmBP,IAAnB,CAAb;AACD;;AAEDhB,IAAAA,MAAM,CAACS,SAAP,CAAiBe,KAAjB,GAAyB,YAAW;AAClC,aAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,KAFD;;AAIA1B,IAAAA,MAAM,CAACS,SAAP,CAAiBkB,QAAjB,GAA4B,UAASC,OAAT,EAAkB;AAC5C,aAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBN,GAApB,CAAwB,IAAxB,EAA8B,KAAKK,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAA9B,CAAP;AACD,KAFD;;AAIA,WAAO5B,MAAP;AAED,GAtByB,CAsBvBD,OAtBuB,CAA1B;AAwBD,CAjCD,EAiCGO,IAjCH,CAiCQ,IAjCR","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLNode, XMLRaw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = (function(superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n\n  })(XMLNode);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}