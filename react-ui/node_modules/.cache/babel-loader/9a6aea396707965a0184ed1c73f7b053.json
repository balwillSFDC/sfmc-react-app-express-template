{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var NodeType,\n      XMLDTDAttList,\n      XMLNode,\n      extend = function (child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = function (superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function (options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n  }(XMLNode);\n}).call(this);","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/react-ui/node_modules/xmlbuilder/lib/XMLDTDAttList.js"],"names":["NodeType","XMLDTDAttList","XMLNode","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","require","module","exports","superClass","elementName","attributeName","attributeType","defaultValueType","defaultValue","Error","debugInfo","indexOf","match","stringify","name","type","AttributeDeclaration","dtdAttType","dtdAttDefault","toString","options","writer","dtdAttList","filterOptions"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = (function(superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n\n  })(XMLNode);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}