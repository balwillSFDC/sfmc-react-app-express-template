{"ast":null,"code":"/*\r\n * Copyright (c) 2018, salesforce.com, inc.\r\n * All rights reserved.\r\n * Licensed under the BSD 3-Clause license.\r\n * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause\r\n */\n'use strict';\n\nvar version = require('../package.json').version;\n\nvar helpers = require('./helpers');\n\nvar request = require('request');\n\nvar xml2js = require('xml2js');\n\nvar FuelAuth = require('fuel-auth');\n\nvar clone = require('lodash.clone');\n\nvar isEmpty = require('lodash.isempty');\n\nvar isPlainObject = require('lodash.isplainobject');\n\nvar merge = require('lodash.merge');\n\nvar parseString = xml2js.parseString;\n/**\r\n * @constructor FuelSoap\r\n * @param {Object} options - Configuration options\r\n * @param {Object} options.auth - Object containing information for auth client to initialize\r\n * @param {Object} [options.headers] - Object key/value pairs will add headers every request.\r\n * @param {String} [options.soapEndpoint=https://webservice.exacttarget.com/Service.asmx] - URL for designated SOAP web service\r\n * @returns {FuelSoap}\r\n */\n\nvar FuelSoap = function (options) {\n  var authOptions = options && options.auth || {}; // use fuel auth instance if applicable\n\n  if (authOptions instanceof FuelAuth) {\n    this.AuthClient = authOptions;\n  } else {\n    try {\n      this.AuthClient = new FuelAuth(authOptions);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  this.version = version;\n  this.requestOptions = {};\n  this.requestOptions.uri = options.soapEndpoint || 'https://webservice.exacttarget.com/Service.asmx';\n  this.requestOptions.method = 'POST';\n  this.globalReqOptions = options.globalReqOptions || {};\n  this.defaultHeaders = merge({\n    'User-Agent': 'node-fuel/' + this.version,\n    'Content-Type': 'text/xml'\n  }, options.headers);\n};\n/**\r\n * This method handles the heavy lifing and is used by other SOAP Actions\r\n * @memberof FuelSoap\r\n * @param {Object} options - Configuration options\r\n * @param {String} options.action - Value that will be used as SOAPAction header\r\n * @param {Object} options.req - SOAP body to be sent prior to building the envelope\r\n * @param {Object} [options.reqOptions] - Options that will be passed into request module (actual API request)\r\n * @param {Object} [options.auth] - Options that will be passed to FuelAuth's getAccessToken function\r\n * @param {Boolean} [options.retry=false] - Whether or not request will retry if token is invalid\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.soapRequest = function (options, callback) {\n  var requestOptions;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('callback argument is required');\n  }\n\n  if (!isPlainObject(options)) {\n    throw new TypeError('options argument is required');\n  } // shoudl probably replace with object.assign down the road\n\n\n  requestOptions = merge({}, this.globalReqOptions, this.requestOptions, {\n    headers: this.defaultHeaders\n  }, options.reqOptions || {});\n  requestOptions.headers.SOAPAction = options.action;\n  this.AuthClient.getAccessToken(clone(options.auth), function (err, body) {\n    var localError, retry, authOptions;\n\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    if (!body.accessToken) {\n      localError = new Error('No access token');\n      localError.res = body;\n      callback(localError, null);\n      return;\n    }\n\n    if (this.AuthClient.authVersion === 2 && body.soap_instance_url) {\n      requestOptions.uri = body.soap_instance_url + 'Service.asmx';\n    }\n\n    retry = options.retry || false;\n    authOptions = clone(options.auth);\n    delete options.retry;\n    delete options.auth;\n    requestOptions.body = this._buildEnvelope(options.req, body.accessToken);\n    request(requestOptions, function (err, res, body) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      this._parseResponse(options.key, body, function (err, data) {\n        if (err && helpers.checkExpiredToken(err) && retry) {\n          options.auth = authOptions;\n          this.soapRequest(options, callback);\n          return;\n        }\n\n        if (err) {\n          callback(err, null);\n        } else {\n          callback(null, {\n            body: data,\n            res: res\n          });\n        }\n      }.bind(this));\n    }.bind(this));\n  }.bind(this));\n};\n/**\r\n * This method handles the Create SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `CreateRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `CreateRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `CreateRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.create = function (type, props, options, callback) {\n  var body;\n  var reqOptions;\n  var updateQueryAllAccounts;\n  var optionsAndCallback;\n  optionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\n  callback = optionsAndCallback.callback;\n  options = optionsAndCallback.options;\n  updateQueryAllAccounts = configureQueryAllAccounts(options);\n\n  if (isEmpty(options)) {\n    options = null;\n  }\n\n  reqOptions = helpers.parseReqOptions(options);\n  body = {\n    CreateRequest: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      Options: options,\n      Objects: props\n    }\n  };\n  body.CreateRequest.Objects.$ = {\n    'xsi:type': type\n  };\n  updateQueryAllAccounts(body.CreateRequest, 'Options');\n  this.soapRequest({\n    action: 'Create',\n    req: body,\n    key: 'CreateResponse',\n    retry: true,\n    reqOptions: reqOptions\n  }, callback);\n};\n/**\r\n * This method handles the Retrieve SOAP Action\r\n * It should be noted that type and callback are the only params required.\r\n * If **3 params** exist, function looks like `function(type, options, callback)`.\r\n * If **2 params** exist, function looks like `function(type, callback)`.\r\n * @memberof FuelSoap\r\n * @param {String} type - Will be used in body as `ObjectType` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param {Object} [props=['Client', 'ID', 'ObjectID']] - Value set in body as `RetrieveRequestMsg.RetrieveRequest.Properties`\r\n * @param {Object} [options] - Configuration options\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param [options.clientIDs] - Will be used in body as `ClientIDs` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param [options.filter] - Will be used in body as `Filter` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param [options.continueRequest] - Will be used in body as `ContinueRequest` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.retrieve = function (type, props, options, callback) {\n  var body;\n  var clientIDs = null;\n  var continueReq = null;\n  var defaultProps = ['Client', 'ID', 'ObjectID'];\n  var filter = null;\n  var reqOptions;\n  var updateQueryAllAccounts;\n\n  if (arguments.length < 4) {\n    //if props and options are not included\n    if (typeof arguments[1] === 'function') {\n      callback = props;\n      clientIDs = null;\n      filter = null;\n      options = null;\n      props = defaultProps;\n    } //if props or options is included\n\n\n    if (typeof arguments[2] === 'function') {\n      callback = options; //check if props or filter\n\n      if (isPlainObject(arguments[1])) {\n        clientIDs = options.clientIDs; // this should really be props. thinking about removing all the complexity with different parameter ordering\n\n        continueReq = options.continueRequest || props.continueRequest;\n        filter = options.filter; // this should really be props\n\n        props = defaultProps;\n      } else {\n        clientIDs = null;\n        filter = null;\n        options = null;\n      }\n    }\n  } else {\n    clientIDs = options.clientIDs;\n    continueReq = options.continueRequest;\n    filter = options.filter;\n  }\n\n  updateQueryAllAccounts = configureQueryAllAccounts(options);\n  reqOptions = helpers.parseReqOptions(options);\n  body = {\n    RetrieveRequestMsg: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      RetrieveRequest: {\n        ObjectType: type,\n        Properties: props\n      }\n    }\n  }; //TO-DO How to handle casing with properties?\n\n  if (clientIDs) {\n    body.RetrieveRequestMsg.RetrieveRequest.ClientIDs = clientIDs;\n  } // filter can be simple or complex and has three properties leftOperand, rightOperand, and operator\n\n\n  if (filter) {\n    body.RetrieveRequestMsg.RetrieveRequest.Filter = this._parseFilter(filter);\n  }\n\n  updateQueryAllAccounts(body.RetrieveRequestMsg, 'RetrieveRequest');\n\n  if (continueReq) {\n    body.RetrieveRequestMsg.RetrieveRequest.ContinueRequest = continueReq;\n  }\n\n  this.soapRequest({\n    action: 'Retrieve',\n    req: body,\n    key: 'RetrieveResponseMsg',\n    retry: true,\n    reqOptions: reqOptions\n  }, callback);\n};\n/**\r\n * This method handles the Update SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `UpdateRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `UpdateRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `UpdateRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.update = function (type, props, options, callback) {\n  var body;\n  var optionsAndCallback;\n  var reqOptions;\n  var updateQueryAllAccounts;\n  optionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\n  callback = optionsAndCallback.callback;\n  options = optionsAndCallback.options;\n  updateQueryAllAccounts = configureQueryAllAccounts(options);\n\n  if (isEmpty(options)) {\n    options = null;\n  }\n\n  reqOptions = helpers.parseReqOptions(options);\n  body = {\n    UpdateRequest: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      Options: options,\n      Objects: props\n    }\n  };\n  body.UpdateRequest.Objects.$ = {\n    'xsi:type': type\n  };\n  updateQueryAllAccounts(body.UpdateRequest, 'Options');\n  this.soapRequest({\n    action: 'Update',\n    req: body,\n    key: 'UpdateResponse',\n    retry: true,\n    reqOptions: reqOptions\n  }, callback);\n};\n/**\r\n * This method handles the Delete SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `DeleteRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `DeleteRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `DeleteRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.delete = function (type, props, options, callback) {\n  var body;\n  var optionsAndCallback;\n  var reqOptions;\n  var updateQueryAllAccounts;\n  optionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\n  callback = optionsAndCallback.callback;\n  options = optionsAndCallback.options;\n  updateQueryAllAccounts = configureQueryAllAccounts(options);\n\n  if (isEmpty(options)) {\n    options = null;\n  }\n\n  reqOptions = helpers.parseReqOptions(options);\n  body = {\n    DeleteRequest: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      Options: options,\n      Objects: props\n    }\n  };\n  body.DeleteRequest.Objects.$ = {\n    'xsi:type': type\n  };\n  updateQueryAllAccounts(body.DeleteRequest, 'Options');\n  this.soapRequest({\n    action: 'Delete',\n    req: body,\n    key: 'DeleteResponse',\n    retry: true,\n    reqOptions: reqOptions\n  }, callback);\n};\n/**\r\n * This method handles the Describe SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - Will be used in body as `ObjectType` under `DefinitionRequestMsg.DescribeRequests.ObjectDefinitionRequest`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.describe = function (type, callback) {\n  var body = {\n    DefinitionRequestMsg: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      DescribeRequests: {\n        ObjectDefinitionRequest: {\n          ObjectType: type\n        }\n      }\n    }\n  };\n  this.soapRequest({\n    action: 'Describe',\n    req: body,\n    key: 'DefinitionResponseMsg',\n    retry: true\n  }, callback);\n};\n/**\r\n * This method handles the Execute SOAP Actionf\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `ExecuteRequestMsg.Requests.Parameters`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.execute = function (type, props, callback) {\n  var body = {\n    ExecuteRequestMsg: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      Requests: {\n        Name: type,\n        Parameters: props\n      }\n    }\n  };\n  this.soapRequest({\n    action: 'Execute',\n    req: body,\n    key: 'ExecuteResponseMsg',\n    retry: true\n  }, callback);\n};\n/**\r\n * This method handles the Perform SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} def - definition set in body as `PerformRequestMsg.Definitions.Definition`...only handles one def\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.perform = function (type, def, callback) {\n  def.$ = {\n    'xsi:type': type\n  }; //This limits us to one def at a time\n\n  var body = {\n    PerformRequestMsg: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      \"Action\": \"start\",\n      \"Definitions\": [{\n        \"Definition\": def\n      }]\n    }\n  };\n  this.soapRequest({\n    action: 'Perform',\n    req: body,\n    key: 'PerformResponseMsg',\n    retry: true\n  }, callback);\n};\n/**\r\n * This method builds the body of the request\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {Object} request - Body that will be transformed to XML for API request\r\n * @param {String} token - Access token supplied by `AuthClient`\r\n * @returns {Object} Builder object from xml2js module\r\n */\n\n\nFuelSoap.prototype._buildEnvelope = function (request, token) {\n  var builder;\n  var envelope = {};\n  envelope.Body = request;\n  envelope.$ = {\n    xmlns: 'http://schemas.xmlsoap.org/soap/envelope/',\n    'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n  };\n  envelope.Header = {\n    fueloauth: {\n      $: {\n        xmlns: 'http://exacttarget.com'\n      },\n      '_': token\n    }\n  };\n  builder = new xml2js.Builder({\n    rootName: 'Envelope',\n    headless: true\n  });\n  return builder.buildObject(envelope);\n};\n/**\r\n * This method parses a filter that will be passed into the body.\r\n * Will recursively create simple filters out of complex filters\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {Object|String} filter\r\n * @returns {Object}\r\n */\n// TO-DO Handle other simple filter value types like DateValue\n\n\nFuelSoap.prototype._parseFilter = function (filter) {\n  var filterType = 'Simple';\n  var obj = {};\n\n  if (isObject(filter.leftOperand) && isObject(filter.rightOperand)) {\n    filterType = 'Complex';\n  }\n\n  switch (filterType.toLowerCase()) {\n    case 'simple':\n      obj.Property = filter.leftOperand;\n      obj.SimpleOperator = filter.operator;\n      obj.Value = filter.rightOperand;\n      break;\n\n    case 'complex':\n      obj.LeftOperand = this._parseFilter(filter.leftOperand);\n      obj.LogicalOperator = filter.operator;\n      obj.RightOperand = this._parseFilter(filter.rightOperand);\n      break;\n  }\n\n  obj.$ = {\n    'xsi:type': filterType + \"FilterPart\"\n  };\n  return obj;\n};\n/**\r\n * This method parses a filter that will be passed into the body.\r\n * Will recursively create simple filters out of complex filters\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {String} key - Value used to determine where the response data is\r\n * @returns {Object} body - Data returned from API\r\n * @param {Function} callback - function responsible for delivering reponse\r\n */\n\n\nFuelSoap.prototype._parseResponse = function (key, body, callback) {\n  var parseOptions = {\n    trim: true,\n    normalize: true,\n    explicitArray: false,\n    ignoreAttrs: true\n  };\n  parseString(body, parseOptions, function (err, res) {\n    if (err) {\n      err.errorPropagatedFrom = 'xml2js.parseString';\n      callback(err, null);\n      return;\n    }\n\n    var soapError;\n    var soapBody = res['soap:Envelope']['soap:Body']; // Check for SOAP Fault\n\n    if (soapBody['soap:Fault']) {\n      var fault = soapBody['soap:Fault'];\n      soapError = new Error(fault.faultstring);\n      soapError.faultstring = fault.faultstring;\n      soapError.faultCode = fault.faultcode;\n\n      if (fault.detail) {\n        soapError.detail = fault.detail;\n      }\n\n      soapError.errorPropagatedFrom = 'SOAP Fault';\n      callback(soapError, null);\n      return;\n    }\n\n    var parsedRes = soapBody[key];\n\n    if (key === 'DefinitionResponseMsg') {\n      // Return empty object if no ObjectDefinition is returned.\n      parsedRes.ObjectDefinition = parsedRes.ObjectDefinition || {};\n      callback(null, parsedRes);\n      return;\n    } // Results should always be an array\n\n\n    parsedRes.Results = Array.isArray(parsedRes.Results) ? parsedRes.Results : isObject(parsedRes.Results) ? [parsedRes.Results] : [];\n\n    if (key === 'RetrieveResponseMsg') {\n      if (parsedRes.OverallStatus === 'OK' || parsedRes.OverallStatus === 'MoreDataAvailable') {\n        callback(null, parsedRes);\n      } else {\n        // This is an error\n        soapError = new Error(parsedRes.OverallStatus.split(':')[1].trim());\n        soapError.requestId = parsedRes.RequestID;\n        soapError.errorPropagatedFrom = 'Retrieve Response';\n        callback(soapError, null);\n      }\n\n      return;\n    }\n\n    if (parsedRes.OverallStatus === 'Error' || parsedRes.OverallStatus === 'Has Errors') {\n      soapError = new Error('Soap Error');\n      soapError.requestId = parsedRes.RequestID;\n      soapError.results = parsedRes.Results;\n      soapError.errorPropagatedFrom = key;\n      callback(soapError, null);\n      return;\n    }\n\n    callback(null, parsedRes);\n  }.bind(this));\n};\n/**\r\n * This method handles the Schedule SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `ScheduleRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `ScheduleRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `ScheduleRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\n\n\nFuelSoap.prototype.schedule = function (type, schedule, interactions, action, options, callback) {\n  var body;\n  var optionsAndCallback;\n  var reqOptions;\n  var updateQueryAllAccounts;\n  optionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\n  callback = optionsAndCallback.callback;\n  options = optionsAndCallback.options;\n  updateQueryAllAccounts = configureQueryAllAccounts(options);\n\n  if (isEmpty(options)) {\n    options = null;\n  }\n\n  reqOptions = helpers.parseReqOptions(options);\n  body = {\n    ScheduleRequestMsg: {\n      $: {\n        xmlns: 'http://exacttarget.com/wsdl/partnerAPI'\n      },\n      Action: action,\n      Options: options,\n      Schedule: schedule,\n      Interactions: interactions\n    }\n  };\n\n  if (Array.isArray(body.ScheduleRequestMsg.Interactions)) {\n    for (let i = 0; i < body.ScheduleRequestMsg.Interactions.length; i++) {\n      body.ScheduleRequestMsg.Interactions[0].Interaction.$ = {\n        'xsi:type': type\n      };\n    }\n  } else if (typeof body.ScheduleRequestMsg.Interactions === \"object\") {\n    body.ScheduleRequestMsg.Interactions.Interaction.$ = {\n      'xsi:type': type\n    };\n  } else {\n    throw new TypeError('Interactions must be of Array or Object Type');\n  }\n\n  updateQueryAllAccounts(body.ScheduleRequestMsg, 'Options');\n  this.soapRequest({\n    action: 'Schedule',\n    req: body,\n    key: 'ScheduleResponseMsg',\n    retry: true,\n    reqOptions: reqOptions\n  }, callback);\n}; // Methods that need implementations\n\n\nFuelSoap.prototype.configure = function () {};\n\nFuelSoap.prototype.extract = function () {};\n\nFuelSoap.prototype.getSystemStatus = function () {};\n\nFuelSoap.prototype.query = function () {};\n\nFuelSoap.prototype.versionInfo = function () {};\n\nfunction determineCallbackAndOptions(args, callback, options) {\n  if (args.length < 4) {\n    //if options are not included\n    if (typeof args[2] === 'function') {\n      callback = options;\n      options = null;\n    }\n  }\n\n  return {\n    callback: callback,\n    options: options\n  };\n}\n\nfunction configureQueryAllAccounts(options) {\n  var addQueryAllAccounts = false;\n\n  if (options && options.queryAllAccounts) {\n    addQueryAllAccounts = true;\n    delete options.queryAllAccounts;\n  }\n\n  return function (rootElement, child) {\n    if (addQueryAllAccounts) {\n      rootElement[child] = rootElement[child] || {};\n      rootElement[child].QueryAllAccounts = true;\n    }\n  };\n}\n\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type === 'object' || type === 'function');\n}\n\nmodule.exports = FuelSoap;\n/**\r\n * This callback is displayed as part of the Requester class.\r\n * @callback FuelSoap~StandardCallback\r\n * @param {Object} error - error object as node standard\r\n * @param {Object} response - reponse object created from API request\r\n * @param {Object} response.body - Parsed XML response from API\r\n * @param {Object} response.res - Full response from API returned by request module\r\n */","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/node_modules/fuel-soap/lib/fuel-soap.js"],"names":["version","require","helpers","request","xml2js","FuelAuth","clone","isEmpty","isPlainObject","merge","parseString","FuelSoap","options","authOptions","auth","AuthClient","err","requestOptions","uri","soapEndpoint","method","globalReqOptions","defaultHeaders","headers","prototype","soapRequest","callback","TypeError","reqOptions","SOAPAction","action","getAccessToken","body","localError","retry","accessToken","Error","res","authVersion","soap_instance_url","_buildEnvelope","req","_parseResponse","key","data","checkExpiredToken","bind","create","type","props","updateQueryAllAccounts","optionsAndCallback","determineCallbackAndOptions","arguments","configureQueryAllAccounts","parseReqOptions","CreateRequest","$","xmlns","Options","Objects","retrieve","clientIDs","continueReq","defaultProps","filter","length","continueRequest","RetrieveRequestMsg","RetrieveRequest","ObjectType","Properties","ClientIDs","Filter","_parseFilter","ContinueRequest","update","UpdateRequest","delete","DeleteRequest","describe","DefinitionRequestMsg","DescribeRequests","ObjectDefinitionRequest","execute","ExecuteRequestMsg","Requests","Name","Parameters","perform","def","PerformRequestMsg","token","builder","envelope","Body","Header","fueloauth","Builder","rootName","headless","buildObject","filterType","obj","isObject","leftOperand","rightOperand","toLowerCase","Property","SimpleOperator","operator","Value","LeftOperand","LogicalOperator","RightOperand","parseOptions","trim","normalize","explicitArray","ignoreAttrs","errorPropagatedFrom","soapError","soapBody","fault","faultstring","faultCode","faultcode","detail","parsedRes","ObjectDefinition","Results","Array","isArray","OverallStatus","split","requestId","RequestID","results","schedule","interactions","ScheduleRequestMsg","Action","Schedule","Interactions","i","Interaction","configure","extract","getSystemStatus","query","versionInfo","args","addQueryAllAccounts","queryAllAccounts","rootElement","child","QueryAllAccounts","value","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2018, salesforce.com, inc.\r\n * All rights reserved.\r\n * Licensed under the BSD 3-Clause license.\r\n * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause\r\n */\r\n\r\n'use strict';\r\n\r\nvar version     = require('../package.json').version;\r\nvar helpers     = require('./helpers');\r\nvar request     = require('request');\r\nvar xml2js      = require('xml2js');\r\nvar FuelAuth    = require('fuel-auth');\r\n\r\nvar clone         = require('lodash.clone');\r\nvar isEmpty       = require('lodash.isempty');\r\nvar isPlainObject = require('lodash.isplainobject');\r\nvar merge         = require('lodash.merge');\r\n\r\nvar parseString   = xml2js.parseString;\r\n\r\n/**\r\n * @constructor FuelSoap\r\n * @param {Object} options - Configuration options\r\n * @param {Object} options.auth - Object containing information for auth client to initialize\r\n * @param {Object} [options.headers] - Object key/value pairs will add headers every request.\r\n * @param {String} [options.soapEndpoint=https://webservice.exacttarget.com/Service.asmx] - URL for designated SOAP web service\r\n * @returns {FuelSoap}\r\n */\r\nvar FuelSoap = function(options) {\r\n\tvar authOptions = options && options.auth || {};\r\n\r\n\t// use fuel auth instance if applicable\r\n\tif(authOptions instanceof  FuelAuth) {\r\n\t\tthis.AuthClient = authOptions;\r\n\t} else {\r\n\t\ttry {\r\n\t\t\tthis.AuthClient = new FuelAuth(authOptions);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tthis.version               = version;\r\n\tthis.requestOptions        = {};\r\n\tthis.requestOptions.uri    = options.soapEndpoint || 'https://webservice.exacttarget.com/Service.asmx';\r\n\tthis.requestOptions.method = 'POST';\r\n\tthis.globalReqOptions = options.globalReqOptions || {};\r\n\r\n\tthis.defaultHeaders = merge({\r\n\t\t'User-Agent': 'node-fuel/' + this.version\r\n\t\t, 'Content-Type': 'text/xml'\r\n\t}, options.headers);\r\n};\r\n\r\n\r\n/**\r\n * This method handles the heavy lifing and is used by other SOAP Actions\r\n * @memberof FuelSoap\r\n * @param {Object} options - Configuration options\r\n * @param {String} options.action - Value that will be used as SOAPAction header\r\n * @param {Object} options.req - SOAP body to be sent prior to building the envelope\r\n * @param {Object} [options.reqOptions] - Options that will be passed into request module (actual API request)\r\n * @param {Object} [options.auth] - Options that will be passed to FuelAuth's getAccessToken function\r\n * @param {Boolean} [options.retry=false] - Whether or not request will retry if token is invalid\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.soapRequest = function(options, callback) {\r\n\tvar requestOptions;\r\n\r\n\tif(typeof callback !== 'function') {\r\n\t\tthrow new TypeError('callback argument is required');\r\n\t}\r\n\r\n\tif(!isPlainObject(options)) {\r\n\t\tthrow new TypeError('options argument is required');\r\n\t}\r\n\r\n\t// shoudl probably replace with object.assign down the road\r\n\trequestOptions = merge(\r\n\t\t{}\r\n\t\t, this.globalReqOptions\r\n\t\t, this.requestOptions\r\n\t\t, { headers: this.defaultHeaders }\r\n\t\t, (options.reqOptions || {})\r\n\t);\r\n\trequestOptions.headers.SOAPAction = options.action;\r\n\r\n\tthis.AuthClient.getAccessToken(clone(options.auth), function(err, body) {\r\n\t\tvar localError, retry, authOptions;\r\n\r\n\t\tif(err) {\r\n\t\t\tcallback(err, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!body.accessToken) {\r\n\t\t\tlocalError     = new Error('No access token');\r\n\t\t\tlocalError.res = body;\r\n\t\t\tcallback(localError, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(this.AuthClient.authVersion === 2 && body.soap_instance_url) {\r\n\t\t\trequestOptions.uri = body.soap_instance_url + 'Service.asmx';\r\n\t\t}\r\n\r\n\t\tretry       = options.retry || false;\r\n\t\tauthOptions = clone(options.auth);\r\n\r\n\t\tdelete options.retry;\r\n\t\tdelete options.auth;\r\n\r\n\t\trequestOptions.body = this._buildEnvelope(options.req, body.accessToken);\r\n\r\n\t\trequest(requestOptions, function(err, res, body) {\r\n\t\t\tif(err) {\r\n\t\t\t\tcallback(err, null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._parseResponse(options.key, body, function(err, data) {\r\n\t\t\t\tif(err && helpers.checkExpiredToken(err) && retry) {\r\n\t\t\t\t\toptions.auth = authOptions;\r\n\t\t\t\t\tthis.soapRequest(options, callback);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\tcallback(err, null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback(null, { body: data, res: res });\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t}.bind(this));\r\n\t}.bind(this));\r\n};\r\n\r\n/**\r\n * This method handles the Create SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `CreateRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `CreateRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `CreateRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.create = function(type, props, options, callback) {\r\n\tvar body;\r\n\tvar reqOptions;\r\n\tvar updateQueryAllAccounts;\r\n\tvar optionsAndCallback;\r\n\r\n\toptionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\r\n\tcallback = optionsAndCallback.callback;\r\n\toptions  = optionsAndCallback.options;\r\n\r\n\tupdateQueryAllAccounts = configureQueryAllAccounts(options);\r\n\tif(isEmpty(options)) {\r\n\t\toptions = null;\r\n\t}\r\n\r\n\treqOptions = helpers.parseReqOptions(options);\r\n\tbody = {\r\n\t\tCreateRequest: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, Options: options\r\n\t\t\t, Objects: props\r\n\t\t}\r\n\t};\r\n\r\n\tbody.CreateRequest.Objects.$ = { 'xsi:type': type };\r\n\r\n\tupdateQueryAllAccounts(body.CreateRequest, 'Options');\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Create'\r\n\t\t, req: body\r\n\t\t, key: 'CreateResponse'\r\n\t\t, retry: true\r\n\t\t, reqOptions: reqOptions\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Retrieve SOAP Action\r\n * It should be noted that type and callback are the only params required.\r\n * If **3 params** exist, function looks like `function(type, options, callback)`.\r\n * If **2 params** exist, function looks like `function(type, callback)`.\r\n * @memberof FuelSoap\r\n * @param {String} type - Will be used in body as `ObjectType` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param {Object} [props=['Client', 'ID', 'ObjectID']] - Value set in body as `RetrieveRequestMsg.RetrieveRequest.Properties`\r\n * @param {Object} [options] - Configuration options\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param [options.clientIDs] - Will be used in body as `ClientIDs` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param [options.filter] - Will be used in body as `Filter` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param [options.continueRequest] - Will be used in body as `ContinueRequest` under `RetrieveRequestMsg.RetrieveRequest`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.retrieve = function(type, props, options, callback) {\r\n\tvar body;\r\n\tvar clientIDs    = null;\r\n\tvar continueReq  = null;\r\n\tvar defaultProps = ['Client', 'ID', 'ObjectID'];\r\n\tvar filter       = null;\r\n\tvar reqOptions;\r\n\tvar updateQueryAllAccounts;\r\n\r\n\tif(arguments.length < 4) {\r\n\t\t//if props and options are not included\r\n\t\tif(typeof arguments[1] === 'function') {\r\n\t\t\tcallback  = props;\r\n\t\t\tclientIDs = null;\r\n\t\t\tfilter    = null;\r\n\t\t\toptions   = null;\r\n\t\t\tprops     = defaultProps;\r\n\t\t}\r\n\r\n\t\t//if props or options is included\r\n\t\tif(typeof arguments[2] === 'function') {\r\n\t\t\tcallback = options;\r\n\t\t\t//check if props or filter\r\n\t\t\tif(isPlainObject(arguments[1])) {\r\n\t\t\t\tclientIDs = options.clientIDs; // this should really be props. thinking about removing all the complexity with different parameter ordering\r\n\t\t\t\tcontinueReq = options.continueRequest || props.continueRequest;\r\n\t\t\t\tfilter = options.filter; // this should really be props\r\n\t\t\t\tprops = defaultProps;\r\n\t\t\t} else {\r\n\t\t\t\tclientIDs = null;\r\n\t\t\t\tfilter    = null;\r\n\t\t\t\toptions   = null;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tclientIDs = options.clientIDs;\r\n\t\tcontinueReq = options.continueRequest;\r\n\t\tfilter    = options.filter;\r\n\t}\r\n\r\n\tupdateQueryAllAccounts = configureQueryAllAccounts(options);\r\n\treqOptions = helpers.parseReqOptions(options);\r\n\tbody = {\r\n\t\tRetrieveRequestMsg: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, RetrieveRequest: {\r\n\t\t\t\tObjectType: type\r\n\t\t\t\t, Properties: props\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t//TO-DO How to handle casing with properties?\r\n\tif(clientIDs) {\r\n\t\tbody.RetrieveRequestMsg.RetrieveRequest.ClientIDs = clientIDs;\r\n\t}\r\n\r\n\t// filter can be simple or complex and has three properties leftOperand, rightOperand, and operator\r\n\tif(filter) {\r\n\t\tbody.RetrieveRequestMsg.RetrieveRequest.Filter = this._parseFilter(filter);\r\n\t}\r\n\r\n\tupdateQueryAllAccounts(body.RetrieveRequestMsg, 'RetrieveRequest');\r\n\r\n\tif(continueReq) {\r\n\t\tbody.RetrieveRequestMsg.RetrieveRequest.ContinueRequest = continueReq;\r\n\t}\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Retrieve'\r\n\t\t, req: body\r\n\t\t, key: 'RetrieveResponseMsg'\r\n\t\t, retry: true\r\n\t\t, reqOptions: reqOptions\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Update SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `UpdateRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `UpdateRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `UpdateRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.update = function(type, props, options, callback) {\r\n\tvar body;\r\n\tvar optionsAndCallback;\r\n\tvar reqOptions;\r\n\tvar updateQueryAllAccounts;\r\n\r\n\toptionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\r\n\tcallback = optionsAndCallback.callback;\r\n\toptions  = optionsAndCallback.options;\r\n\r\n\tupdateQueryAllAccounts = configureQueryAllAccounts(options);\r\n\tif(isEmpty(options)) {\r\n\t\toptions = null;\r\n\t}\r\n\r\n\treqOptions = helpers.parseReqOptions(options);\r\n\tbody = {\r\n\t\tUpdateRequest: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, Options: options\r\n\t\t\t, Objects: props\r\n\t\t}\r\n\t};\r\n\r\n\tbody.UpdateRequest.Objects.$ = { 'xsi:type': type };\r\n\r\n\tupdateQueryAllAccounts(body.UpdateRequest, 'Options');\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Update'\r\n\t\t, req: body\r\n\t\t, key: 'UpdateResponse'\r\n\t\t, retry: true\r\n\t\t, reqOptions: reqOptions\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Delete SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `DeleteRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `DeleteRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `DeleteRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.delete = function(type, props, options, callback) {\r\n\tvar body;\r\n\tvar optionsAndCallback;\r\n\tvar reqOptions;\r\n\tvar updateQueryAllAccounts;\r\n\r\n\toptionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\r\n\tcallback = optionsAndCallback.callback;\r\n\toptions  = optionsAndCallback.options;\r\n\r\n\tupdateQueryAllAccounts = configureQueryAllAccounts(options);\r\n\tif(isEmpty(options)) {\r\n\t\toptions = null;\r\n\t}\r\n\r\n\treqOptions = helpers.parseReqOptions(options);\r\n\tbody = {\r\n\t\tDeleteRequest: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, Options: options\r\n\t\t\t, Objects: props\r\n\t\t}\r\n\t};\r\n\r\n\tbody.DeleteRequest.Objects.$ = { 'xsi:type': type };\r\n\r\n\tupdateQueryAllAccounts(body.DeleteRequest, 'Options');\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Delete'\r\n\t\t, req: body\r\n\t\t, key: 'DeleteResponse'\r\n\t\t, retry: true\r\n\t\t, reqOptions: reqOptions\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Describe SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - Will be used in body as `ObjectType` under `DefinitionRequestMsg.DescribeRequests.ObjectDefinitionRequest`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.describe = function(type, callback) {\r\n\tvar body = {\r\n\t\tDefinitionRequestMsg: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, DescribeRequests: {\r\n\t\t\t\tObjectDefinitionRequest: {\r\n\t\t\t\t\tObjectType: type\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Describe'\r\n\t\t, req: body\r\n\t\t, key: 'DefinitionResponseMsg'\r\n\t\t, retry: true\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Execute SOAP Actionf\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `ExecuteRequestMsg.Requests.Parameters`\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.execute = function(type, props, callback) {\r\n\tvar body = {\r\n\t\tExecuteRequestMsg: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, Requests: {\r\n\t\t\t\tName: type\r\n\t\t\t\t, Parameters: props\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Execute'\r\n\t\t, req: body\r\n\t\t, key: 'ExecuteResponseMsg'\r\n\t\t, retry: true\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method handles the Perform SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} def - definition set in body as `PerformRequestMsg.Definitions.Definition`...only handles one def\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.perform = function(type, def, callback) {\r\n\r\n\tdef.$ = { 'xsi:type': type }; //This limits us to one def at a time\r\n\r\n\tvar body = {\r\n\t\tPerformRequestMsg: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t,\r\n\t\t\t\"Action\":\"start\",\r\n\t\t\t\"Definitions\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Definition\":def\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t};\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Perform'\r\n\t\t, req: body\r\n\t\t, key: 'PerformResponseMsg'\r\n\t\t, retry: true\r\n\t}, callback);\r\n};\r\n\r\n/**\r\n * This method builds the body of the request\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {Object} request - Body that will be transformed to XML for API request\r\n * @param {String} token - Access token supplied by `AuthClient`\r\n * @returns {Object} Builder object from xml2js module\r\n */\r\nFuelSoap.prototype._buildEnvelope = function(request, token) {\r\n\tvar builder;\r\n\tvar envelope = {};\r\n\r\n\tenvelope.Body = request;\r\n\tenvelope.$ = {\r\n\t\txmlns: 'http://schemas.xmlsoap.org/soap/envelope/',\r\n\t\t'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t};\r\n\tenvelope.Header = {\r\n\t\tfueloauth: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com'\r\n\t\t\t}\r\n\t\t\t, '_': token\r\n\t\t}\r\n\t};\r\n\r\n\tbuilder = new xml2js.Builder({\r\n\t\trootName: 'Envelope'\r\n\t\t, headless: true\r\n\t});\r\n\r\n\treturn builder.buildObject(envelope);\r\n};\r\n\r\n/**\r\n * This method parses a filter that will be passed into the body.\r\n * Will recursively create simple filters out of complex filters\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {Object|String} filter\r\n * @returns {Object}\r\n */\r\n// TO-DO Handle other simple filter value types like DateValue\r\nFuelSoap.prototype._parseFilter = function(filter) {\r\n\tvar filterType = 'Simple';\r\n\tvar obj = {};\r\n\r\n\tif(isObject(filter.leftOperand) && isObject(filter.rightOperand)) {\r\n\t\tfilterType = 'Complex';\r\n\t}\r\n\r\n\tswitch(filterType.toLowerCase()) {\r\n\t\tcase 'simple':\r\n\t\t\tobj.Property       = filter.leftOperand;\r\n\t\t\tobj.SimpleOperator = filter.operator;\r\n\t\t\tobj.Value          = filter.rightOperand;\r\n\t\t\tbreak;\r\n\t\tcase 'complex':\r\n\t\t\tobj.LeftOperand     = this._parseFilter(filter.leftOperand);\r\n\t\t\tobj.LogicalOperator = filter.operator;\r\n\t\t\tobj.RightOperand    = this._parseFilter(filter.rightOperand);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tobj.$ = { 'xsi:type': filterType + \"FilterPart\" };\r\n\r\n\treturn obj;\r\n};\r\n\r\n/**\r\n * This method parses a filter that will be passed into the body.\r\n * Will recursively create simple filters out of complex filters\r\n * @private\r\n * @memberof PrivateMethods\r\n * @param {String} key - Value used to determine where the response data is\r\n * @returns {Object} body - Data returned from API\r\n * @param {Function} callback - function responsible for delivering reponse\r\n */\r\nFuelSoap.prototype._parseResponse = function(key, body, callback) {\r\n\tvar parseOptions = {\r\n\t\ttrim: true\r\n\t\t, normalize: true\r\n\t\t, explicitArray: false\r\n\t\t, ignoreAttrs: true\r\n\t};\r\n\r\n\tparseString(body, parseOptions, function(err, res) {\r\n\t\tif(err) {\r\n\t\t\terr.errorPropagatedFrom = 'xml2js.parseString';\r\n\t\t\tcallback(err, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar soapError;\r\n\t\tvar soapBody = res['soap:Envelope']['soap:Body'];\r\n\r\n\t\t// Check for SOAP Fault\r\n\t\tif(soapBody['soap:Fault']) {\r\n\t\t\tvar fault             = soapBody['soap:Fault'];\r\n\t\t\tsoapError             = new Error(fault.faultstring);\r\n\t\t\tsoapError.faultstring = fault.faultstring;\r\n\t\t\tsoapError.faultCode   = fault.faultcode;\r\n\r\n\t\t\tif(fault.detail) {\r\n\t\t\t\tsoapError.detail = fault.detail;\r\n\t\t\t}\r\n\r\n\t\t\tsoapError.errorPropagatedFrom = 'SOAP Fault';\r\n\t\t\tcallback(soapError, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar parsedRes = soapBody[key];\r\n\r\n\t\tif(key === 'DefinitionResponseMsg') {\r\n\t\t\t// Return empty object if no ObjectDefinition is returned.\r\n\t\t\tparsedRes.ObjectDefinition = parsedRes.ObjectDefinition || {};\r\n\t\t\tcallback(null, parsedRes);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Results should always be an array\r\n\t\tparsedRes.Results = Array.isArray(parsedRes.Results) ? parsedRes.Results : isObject(parsedRes.Results) ? [parsedRes.Results] : [];\r\n\r\n\t\tif(key === 'RetrieveResponseMsg') {\r\n\t\t\tif(parsedRes.OverallStatus === 'OK' || parsedRes.OverallStatus === 'MoreDataAvailable') {\r\n\t\t\t\tcallback(null, parsedRes);\r\n\t\t\t} else {\r\n\t\t\t\t// This is an error\r\n\t\t\t\tsoapError = new Error(parsedRes.OverallStatus.split(':')[1].trim());\r\n\t\t\t\tsoapError.requestId = parsedRes.RequestID;\r\n\t\t\t\tsoapError.errorPropagatedFrom = 'Retrieve Response';\r\n\t\t\t\tcallback(soapError, null);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(parsedRes.OverallStatus === 'Error' ||  parsedRes.OverallStatus === 'Has Errors') {\r\n\t\t\tsoapError = new Error('Soap Error');\r\n\t\t\tsoapError.requestId = parsedRes.RequestID;\r\n\t\t\tsoapError.results = parsedRes.Results;\r\n\t\t\tsoapError.errorPropagatedFrom = key;\r\n\t\t\tcallback(soapError, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null, parsedRes);\r\n\t}.bind(this));\r\n};\r\n/**\r\n * This method handles the Schedule SOAP Action\r\n * @memberof FuelSoap\r\n * @param {String} type - xsi:type\r\n * @param {Object} props - Value set in body as `ScheduleRequest.Objects`\r\n * @param {Object} [options] - Configuration options passed in body as `ScheduleRequest.Options`\r\n * @param {Boolean} [options.queryAllAccounts=false] - Sets `QueryAllAccounts = true` to body under `ScheduleRequest.Options`. **Note:** This value will be delete from body if used\r\n * @param {Object} [options.reqOptions] - Request options passed to soapRequest fn. **Note:** These will be delete from body if passed\r\n * @param {FuelSoap~StandardCallback} callback - Callback that handles response\r\n */\r\nFuelSoap.prototype.schedule = function(type,schedule,interactions, action, options, callback) {\r\n\tvar body;\r\n\tvar optionsAndCallback;\r\n\tvar reqOptions;\r\n\tvar updateQueryAllAccounts;\r\n\r\n\toptionsAndCallback = determineCallbackAndOptions(arguments, callback, options);\r\n\tcallback = optionsAndCallback.callback;\r\n\toptions  = optionsAndCallback.options;\r\n\r\n\tupdateQueryAllAccounts = configureQueryAllAccounts(options);\r\n\tif(isEmpty(options)) {\r\n\t\toptions = null;\r\n\t}\r\n\r\n\treqOptions = helpers.parseReqOptions(options);\r\n\tbody = {\r\n\t\tScheduleRequestMsg: {\r\n\t\t\t$: {\r\n\t\t\t\txmlns: 'http://exacttarget.com/wsdl/partnerAPI'\r\n\t\t\t}\r\n\t\t\t, Action: action\r\n\t\t\t, Options: options\r\n\t\t\t, Schedule: schedule\r\n\t\t\t, Interactions: interactions\r\n\t\t}\r\n\t};\r\n\r\n\tif(Array.isArray(body.ScheduleRequestMsg.Interactions)){\r\n\t\tfor(let i = 0; i < body.ScheduleRequestMsg.Interactions.length; i++){\r\n\t\t\tbody.ScheduleRequestMsg.Interactions[0].Interaction.$ = {'xsi:type': type};\r\n\t\t }\r\n\t} else if (typeof body.ScheduleRequestMsg.Interactions === \"object\") {\r\n\t\tbody.ScheduleRequestMsg.Interactions.Interaction.$ = {'xsi:type': type};\r\n\t} else {\r\n\t\tthrow new TypeError('Interactions must be of Array or Object Type');\r\n\t}\r\n\r\n\tupdateQueryAllAccounts(body.ScheduleRequestMsg, 'Options');\r\n\r\n\tthis.soapRequest({\r\n\t\taction: 'Schedule'\r\n\t\t, req: body\r\n\t\t, key: 'ScheduleResponseMsg'\r\n\t\t, retry: true\r\n\t\t, reqOptions: reqOptions\r\n\t}, callback);\r\n};\r\n\r\n// Methods that need implementations\r\nFuelSoap.prototype.configure = function() {};\r\nFuelSoap.prototype.extract = function() {};\r\nFuelSoap.prototype.getSystemStatus = function() {};\r\nFuelSoap.prototype.query = function() {};\r\nFuelSoap.prototype.versionInfo = function() {};\r\n\r\nfunction determineCallbackAndOptions(args, callback, options) {\r\n\tif(args.length < 4) {\r\n\t\t//if options are not included\r\n\t\tif(typeof args[2] === 'function') {\r\n\t\t\tcallback = options;\r\n\t\t\toptions = null;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcallback: callback\r\n\t\t, options: options\r\n\t};\r\n}\r\n\r\nfunction configureQueryAllAccounts(options) {\r\n\tvar addQueryAllAccounts = false;\r\n\r\n\tif(options && options.queryAllAccounts) {\r\n\t\taddQueryAllAccounts = true;\r\n\t\tdelete options.queryAllAccounts;\r\n\t}\r\n\r\n\treturn function(rootElement, child) {\r\n\t\tif(addQueryAllAccounts) {\r\n\t\t\trootElement[child] = rootElement[child] || {};\r\n\t\t\trootElement[child].QueryAllAccounts = true;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction isObject(value) {\r\n\tvar type = typeof value;\r\n\treturn !!value && (type === 'object' || type === 'function');\r\n}\r\n\r\nmodule.exports = FuelSoap;\r\n\r\n/**\r\n * This callback is displayed as part of the Requester class.\r\n * @callback FuelSoap~StandardCallback\r\n * @param {Object} error - error object as node standard\r\n * @param {Object} response - reponse object created from API request\r\n * @param {Object} response.body - Parsed XML response from API\r\n * @param {Object} response.res - Full response from API returned by request module\r\n */\r\n"]},"metadata":{},"sourceType":"script"}