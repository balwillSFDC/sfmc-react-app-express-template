{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var NodeType,\n      XMLCharacterData,\n      XMLText,\n      extend = function (child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = function (superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function () {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n\n        str += this.data;\n        next = this.nextSibling;\n\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function () {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function (options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function (offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function (content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n  }(XMLCharacterData);\n}).call(this);","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/node_modules/xmlbuilder/lib/XMLText.js"],"names":["NodeType","XMLCharacterData","XMLText","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","require","module","exports","superClass","text","Error","debugInfo","name","type","Text","value","stringify","Object","defineProperty","get","next","prev","str","previousSibling","data","nextSibling","clone","create","toString","options","writer","filterOptions","splitText","offset","replaceWholeText","content"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLText,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = (function(superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function(options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function(offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function(content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n\n  })(XMLCharacterData);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}