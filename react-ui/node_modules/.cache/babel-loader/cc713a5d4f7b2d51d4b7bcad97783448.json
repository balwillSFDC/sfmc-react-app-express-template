{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport sfmcHelper from './sfmcHelper';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nconst initialState = {\n  buttonClicked: false\n};\n\nconst customMiddleWare = store => next => action => {\n  sfmcHelper.sampleFetch();\n  return next(action);\n};\n\nconst middlewareEnhancer = composeWithDevTools(applyMiddleware(logger, thunkMiddleware));\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === 'BUTTON_CLICKED') {\n    return { ...state,\n      buttonClicked: action.payload.buttonClicked\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(reducer, middlewareEnhancer);\nexport default store;","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","sfmcHelper","thunkMiddleware","logger","initialState","buttonClicked","customMiddleWare","store","next","action","sampleFetch","middlewareEnhancer","reducer","state","type","payload"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB;;AAIA,MAAMC,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAClDR,EAAAA,UAAU,CAACS,WAAX;AAEA,SAAOF,IAAI,CAACC,MAAD,CAAX;AACD,CAJD;;AAMA,MAAME,kBAAkB,GAAGX,mBAAmB,CAACD,eAAe,CAACI,MAAD,EAASD,eAAT,CAAhB,CAA9C;;AAEA,MAAMU,OAAO,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,MAAIA,MAAM,CAACK,IAAP,KAAgB,gBAApB,EAAsC;AACpC,WAAO,EACL,GAAGD,KADE;AAELR,MAAAA,aAAa,EAAEI,MAAM,CAACM,OAAP,CAAeV;AAFzB,KAAP;AAID;;AAED,SAAOQ,KAAP;AACD,CATD;;AAWA,MAAMN,KAAK,GAAGT,WAAW,CAACc,OAAD,EAAUD,kBAAV,CAAzB;AAEA,eAAeJ,KAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport sfmcHelper from './sfmcHelper'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\n\r\nconst initialState = {\r\n  buttonClicked: false\r\n}\r\n\r\nconst customMiddleWare = store => next => action => {\r\n  sfmcHelper.sampleFetch()\r\n  \r\n  return next(action)\r\n}\r\n\r\nconst middlewareEnhancer = composeWithDevTools(applyMiddleware(logger, thunkMiddleware))\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  if (action.type === 'BUTTON_CLICKED') {\r\n    return {\r\n      ...state,\r\n      buttonClicked: action.payload.buttonClicked\r\n    }\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nconst store = createStore(reducer, middlewareEnhancer)\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}