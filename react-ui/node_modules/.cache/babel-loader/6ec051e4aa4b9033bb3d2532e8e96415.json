{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var NodeType,\n      XMLCharacterData,\n      XMLComment,\n      extend = function (child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = function (superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function () {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function (options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n  }(XMLCharacterData);\n}).call(this);","map":{"version":3,"sources":["C:/Users/balwi/Documents/Coding/react-sfmc-api-poc/react-ui/node_modules/xmlbuilder/lib/XMLComment.js"],"names":["NodeType","XMLCharacterData","XMLComment","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","require","module","exports","superClass","text","Error","debugInfo","name","type","Comment","value","stringify","comment","clone","Object","create","toString","options","writer","filterOptions"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ;AAAA,MAAcC,gBAAd;AAAA,MAAgCC,UAAhC;AAAA,MACEC,MAAM,GAAG,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAAE,SAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIE,OAAO,CAACC,IAAR,CAAaH,MAAb,EAAqBC,GAArB,CAAJ,EAA+BF,KAAK,CAACE,GAAD,CAAL,GAAaD,MAAM,CAACC,GAAD,CAAnB;AAA2B;;AAAC,aAASG,IAAT,GAAgB;AAAE,WAAKC,WAAL,GAAmBN,KAAnB;AAA2B;;AAACK,IAAAA,IAAI,CAACE,SAAL,GAAiBN,MAAM,CAACM,SAAxB;AAAmCP,IAAAA,KAAK,CAACO,SAAN,GAAkB,IAAIF,IAAJ,EAAlB;AAA8BL,IAAAA,KAAK,CAACQ,SAAN,GAAkBP,MAAM,CAACM,SAAzB;AAAoC,WAAOP,KAAP;AAAe,GAD5R;AAAA,MAEEG,OAAO,GAAG,GAAGM,cAFf;;AAIAb,EAAAA,QAAQ,GAAGc,OAAO,CAAC,YAAD,CAAlB;AAEAb,EAAAA,gBAAgB,GAAGa,OAAO,CAAC,oBAAD,CAA1B;;AAEAC,EAAAA,MAAM,CAACC,OAAP,GAAiBd,UAAU,GAAI,UAASe,UAAT,EAAqB;AAClDd,IAAAA,MAAM,CAACD,UAAD,EAAae,UAAb,CAAN;;AAEA,aAASf,UAAT,CAAoBG,MAApB,EAA4Ba,IAA5B,EAAkC;AAChChB,MAAAA,UAAU,CAACU,SAAX,CAAqBF,WAArB,CAAiCF,IAAjC,CAAsC,IAAtC,EAA4CH,MAA5C;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAA2B,KAAKC,SAAL,EAArC,CAAN;AACD;;AACD,WAAKC,IAAL,GAAY,UAAZ;AACA,WAAKC,IAAL,GAAYtB,QAAQ,CAACuB,OAArB;AACA,WAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeC,OAAf,CAAuBR,IAAvB,CAAb;AACD;;AAEDhB,IAAAA,UAAU,CAACS,SAAX,CAAqBgB,KAArB,GAA6B,YAAW;AACtC,aAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,KAFD;;AAIA3B,IAAAA,UAAU,CAACS,SAAX,CAAqBmB,QAArB,GAAgC,UAASC,OAAT,EAAkB;AAChD,aAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBN,OAApB,CAA4B,IAA5B,EAAkC,KAAKK,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAAlC,CAAP;AACD,KAFD;;AAIA,WAAO7B,UAAP;AAED,GAvB6B,CAuB3BD,gBAvB2B,CAA9B;AAyBD,CAlCD,EAkCGO,IAlCH,CAkCQ,IAlCR","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLComment,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n\n  })(XMLCharacterData);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}